#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass amsbook
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth -2
\tocdepth -2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter*
Actions
\end_layout

\begin_layout Standard
The main code sections of Open-PPL consist of when-conditions with actions.
 They look e.g.
 like this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

##f$preflop##
\end_layout

\begin_layout Plain Layout

// Openraising on the button
\end_layout

\begin_layout Plain Layout

WHEN (Raises = 0 and Calls = 0 and StillToAct = 2)
\end_layout

\begin_layout Plain Layout

    // Normal openraises
\end_layout

\begin_layout Plain Layout

    WHEN ((Hand$AA) or (Hand$KK)...) RaiseTo 3 FORCE
\end_layout

\begin_layout Plain Layout

    // Pushing according to Sklanky
\end_layout

\begin_layout Plain Layout

    WHEN (StackSize < 20 and ((Hand$ ...) OR ...)) RaiseMax FORCE
\end_layout

\end_inset


\end_layout

\begin_layout Standard
OpenPPL provides 3 kinds of actions:
\end_layout

\begin_layout Section
Fixed Actions
\end_layout

\begin_layout Standard
Examples look like
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

BetMax FORCE
\end_layout

\begin_layout Plain Layout

RaiseMax FORCE
\end_layout

\begin_layout Plain Layout

Allin FORCE        // synonym for BetMax and RaiseMax, but no standard PPL
\end_layout

\begin_layout Plain Layout

BetPot FORCE
\end_layout

\begin_layout Plain Layout

RaisePot FORCE
\end_layout

\begin_layout Plain Layout

BetThreeFourthPot FORCE
\end_layout

\begin_layout Plain Layout

RaiseThreeFourthPot FORCE
\end_layout

\begin_layout Plain Layout

BetTwoThirdPot FORCE
\end_layout

\begin_layout Plain Layout

RaiseTwoThirdPot FORCE
\end_layout

\begin_layout Plain Layout

BetHalfPot FORCE
\end_layout

\begin_layout Plain Layout

RaiseHalfPot FORCE
\end_layout

\begin_layout Plain Layout

BetThirdPot FORCE
\end_layout

\begin_layout Plain Layout

RaiseThirdPot FORCE
\end_layout

\begin_layout Plain Layout

BetFourthPot FORCE
\end_layout

\begin_layout Plain Layout

RaiseFourthPot FORCE
\end_layout

\begin_layout Plain Layout

Bet FORCE          // min-bet (fixed limit)
\end_layout

\begin_layout Plain Layout

Raise FORCE        // min-raise (fixed limit)
\end_layout

\begin_layout Plain Layout

MinBet FORCE
\end_layout

\begin_layout Plain Layout

MinRaise FORCE
\end_layout

\begin_layout Plain Layout

Call FORCE
\end_layout

\begin_layout Plain Layout

Check FORCE
\end_layout

\begin_layout Plain Layout

Fold FORCE
\end_layout

\begin_layout Plain Layout

Beep FORCE         // beep, but don#t act
\end_layout

\end_inset

Contrary to standard PPL OpenPPL does not distinguish bets and raises.
 OpenHoldem treats them exactly the same way.
 
\end_layout

\begin_layout Standard
Please note: SitOut is no longer a supported action.
 In our opinion it is beneficial to separate playing logic and hopper logic.
 Therefore OpenHoldem provides some hopper-functionality, especially the
 functions f$sitin, f$sitout, f$leave and f$close.
 
\end_layout

\begin_layout Standard
Please also note: fixed actions are functions from a technical point of
 view, therefore they are case-sensitive.
\end_layout

\begin_layout Section
Actions With Fixed Betsize
\end_layout

\begin_layout Standard
Examples look like
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

RaiseTo 3.5 FORCE
\end_layout

\end_inset


\end_layout

\begin_layout Standard
or
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

RaiseBy 2.5 FORCE
\end_layout

\end_inset


\end_layout

\begin_layout Standard
RaiseTo specifies your final betsize, RiaseBy specifies the amount you want
 to add to the aggressors bet-amount.
 
\end_layout

\begin_layout Section
Actions With Relative Betsize
\end_layout

\begin_layout Standard
Examples look like
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

RaiseBy 70% FORCE
\end_layout

\end_inset

Here the betsize gets measured as a certain percentage of the pot (pot =
 common pot + all players bets + the amount to call).
 Potsized bets are always RaiseBy.
\end_layout

\begin_layout Section*
Using Expressions For The Bet-Amount
\end_layout

\begin_layout Standard
Let's assume you want to raise to 3 bb in an unraised pot, plus 1 bb for
 each caller.
 With standard PPL this would result in clumsy code.
 But with OpenPPL you can simply write:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

WHEN (Raises = 0) RaiseTo (3 + Calls) FORCE
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you want you could take this to extremes and write good code like the
 following:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

##f$MyFavouriteBetsizeForDryBoards##
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

WHEN (...) RaiseTo MyFavouriteBetsizeForDryBoards FORCE
\end_layout

\end_inset


\end_layout

\begin_layout Section
Being strict: using 
\begin_inset Quotes eld
\end_inset

FORCE
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Every action in OpenPPL has to be terminated by the keyword 
\begin_inset Quotes eld
\end_inset

FORCE
\begin_inset Quotes erd
\end_inset

.
 For standard PPL this keyword was optional.
 If you left it out, it meant, that the bot continued to evaluate and finally
 fell back to the default logic.
 We deviated from that behaviour, as:
\end_layout

\begin_layout Itemize
in our opinion it does not make any sense to specify actions that have no
 effect.
\end_layout

\begin_layout Itemize
OpenPPL does not provide a default bot.
\end_layout

\begin_layout Section*
Quickfolding bad hands
\end_layout

\begin_layout Standard
Most poker-sites provide pre-action-buttons to act before it is your turn.
 Especially useful is the prefold-button that makes it possible to click
 bad hands away and forget about them.
 Being able to click this button with your bot has at least two positive
 effects: more human-like behaviour and playing more hands per hour due
 to faster actions .
 Nothing could be more easy:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

##f$prefold##
\end_layout

\begin_layout Plain Layout

	WHEN AmountToCall > 0 AND (hand$32 OR hand$43 OR ...) Return True FORCE
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Be aware of potentially unstable game-states!
\end_layout

\begin_layout Standard
Please note:
\end_layout

\begin_layout Itemize
prefold gets evaluated when it is 
\emph on
not your turn
\emph default
.
 Therefore it might happen that OpenHoldem takes a screenshot, evaluates
 and acts while the casino updates its table-display and the game-state
 is unstable.
 
\begin_inset Quotes eld
\end_inset

Garbage in -- garbage out
\begin_inset Quotes erd
\end_inset

 will happen.
 Now let's assume you have some super-nitty bot:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

##f$prefold##
\end_layout

\begin_layout Plain Layout

    WHEN (NOT ((Hand$AA) OR (Hand$KK))) Fold FORCE
\end_layout

\end_inset


\begin_inset Graphics
	filename images/PokerStars_Unstable_Gamestate.PNG
	width 526pt
	height 126pt

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Quotes erd
\end_inset

Fold when I don't have a good hand
\begin_inset Quotes erd
\end_inset

.
 But here your good hand can not get recognized because your aces get only
 displayed partially.
 Your bot would fold pocket aces! To avoid problems like that it is recommend
 to code more fail-safe like in the first example: 
\begin_inset Quotes eld
\end_inset

Fold when I have a bad hand
\begin_inset Quotes erd
\end_inset

.
 It won't hurt that much if that command failed and worked only on the next
 heart-beat-cycle.
\end_layout

\begin_layout Itemize
There are even more consequences of potentially unstable frames: OpenPPL
 does its main calculations when it is your turn.
 Especially some more complex symbols which depend on the history of the
 game get updated only when we have stable frames to guarantee their correctness
 -- RaisesSinceLastPlay or LastCallerPosition are examples.
 As a consequence these symbols will simply be undefined before your first
 action preflop.
 Therefore it is recommended to be extra careful about the GIGO-principle
 and stick to the most basic symbols only.
 But this is not too hard for prefold, is it?
\end_layout

\begin_layout Section
Backup actions
\end_layout

\begin_layout Standard
It may happen, that a certain action is not available, e.g.
 you might want to raise by half the pot, but this is currently not possible,
 e.g.
 because your opponent made a large raise and half-pot would be less than
 the minimum.
 In such situations OpenPPL behaves in the following ways:
\end_layout

\begin_layout Itemize
betsize invalid (too less or too much (PotLimit or more than your balance)):
 betsize gets automatically adapted.
 This happens also to actions like RaisePot and RaiseHalfPot, that get executed
 with the f$betsize-function.
\end_layout

\begin_layout Itemize
action can't be executed, because it is not possible, e.g.
 there might be no raise-button, because you can only call (allin) or fold.
 Here OpenPPL behaves in the following way:
\end_layout

\begin_deeper
\begin_layout Itemize
RaisePot if RaiseMax is not possible
\end_layout

\begin_layout Itemize
Raise(Min) if RaisePot or RaiseHalfPot is not possible
\end_layout

\begin_layout Itemize
Call if no Raise is possible
\end_layout

\begin_layout Itemize
Check if no Call is possible
\end_layout

\begin_layout Itemize
Fold if no Check is possible (default behaviour of OpenHoldem).
\end_layout

\begin_layout Standard
This deviates from standard PPL again.
 However we have the following reasons:
\end_layout

\begin_layout Itemize
OpenHoldem evaluates its technical functions in the order above (for details
 please refer to the OpenHoldem Manual).
\end_layout

\begin_layout Itemize
we believe, it is better to behave in a more conservative way if an error
 occurs.
 Most probably you don't want to push allin if you specify RaiseHalfPot
 as your desired action.
 With a min-raise you are probably more happy (or less unhappy).
\end_layout

\end_deeper
\end_body
\end_document
