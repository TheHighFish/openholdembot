#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass amsbook
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth -2
\tocdepth -2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter*
Differences To Shanky And Old-Style-PPL
\end_layout

\begin_layout Standard
If you are a botter who used Shanky-PPL in the past there are some differences
 you should know about:
\end_layout

\begin_layout Section*
Plain Text Only
\end_layout

\begin_layout Standard
The deciphering of encypted PPL is a business-secret of Shanky BonusBots.
 We don't know and will never support this data-format.
 Our aim is to build an open-source botting-tool and not a marketing-platform
 for shady salesmen.
 Therefore OpenPPL is plain text only --- for profiles you own legally,
 or even better: for profiles you build on your own.
\end_layout

\begin_layout Section*
No Option Settings
\end_layout

\begin_layout Standard
Standard Shanky-PPL supports option settings to configure their built-in-default
 bot; at least that was the old way to do so, but nowadays most of these
 settings get overwritten by the profile and have no effect at all.
 OpenHoldems built-in Gecko-bot does not support any Shanky-opttions; they
 have no effect and simply get ignored.
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

MakePotSizedPreFlopRaisesWhen = 6
\end_layout

\begin_layout Plain Layout

FoldToPre-FlopRaisesForAQAJsKQ = OFF
\end_layout

\begin_layout Plain Layout

FoldPost-FlopBelowTopPairToAnyBetOrRaise = OFF
\end_layout

\begin_layout Plain Layout

FoldToPost-FlopRaisesWithUnpairedBoardsFor = 2 
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

custom
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

preflop
\end_layout

\begin_layout Plain Layout

...
\end_layout

\end_inset


\end_layout

\begin_layout Section
No Keyword Custom
\end_layout

\begin_layout Standard
As no built-in default bot exists the whole bot-logic is 
\begin_inset Quotes eld
\end_inset

custom
\begin_inset Quotes erd
\end_inset

.
 Sure, we could ignore that superfluous keyword, however it is an indication
 of old-style or Shanky-style (Open)PPL.
 There will be more things 
\begin_inset Quotes eld
\end_inset

wrong
\begin_inset Quotes erd
\end_inset

 for sure, so we prefer to show you a warning as early as possible.
\end_layout

\begin_layout Section*
Preflop, Flop, Turn and River Sections
\end_layout

\begin_layout Standard
The four main code-sections are functions (technically speaking), therefore
 they have OH-script-style function-header-syntax:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

##f$preflop##
\end_layout

\begin_layout Plain Layout

    WHEN ...
 RaiseMax FORCE
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

##f$flop##
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

##f$turn##
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

##f$river##
\end_layout

\end_inset


\end_layout

\begin_layout Standard
At least the f$preflop-section must be present for OpenHoldem to switch
 to OpenPPL-mode.
\end_layout

\begin_layout Section*
Floating Point Numbers
\end_layout

\begin_layout Standard
There are some differences between Standard PPL and OpenPPL you should care
 about -- luckily only very few:
\end_layout

\begin_layout Itemize
Standard PPL uses integers everywhere, whereas OpenPPL uses floating point
 numbers.
 An example: in Standard PPL you could write code like:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

WHEN Stacksize = 1 AND ...
 RaiseBy 1 FORCE
\end_layout

\begin_layout Plain Layout

WHEN Stacksize = 2 AND
\end_layout

\end_inset

or even
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

WHEN AmountToCall = 70% Stacksize
\end_layout

\end_inset

which will cause troubles with OpenHoldem, because OpenHolden uses real
 numbers like 31.41.
 Therefore it is recommended to use inequality-operators, for example like
 below: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

WHEN Stacksize < 1.5 AND ...
 RaiseBy 1 FORCE
\end_layout

\begin_layout Plain Layout

WHEN Stacksize < 2.5 AND
\end_layout

\end_inset

Or you could even use the new approximately-equal-operator:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

WHEN Stacksize ~~ 3 RaiseMax FORCE
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Standard PPL's symbol NutFullHouseOrFourOfAKind uses lower numbers for better
 full houses or quads, but 0 for no full house at all.
 This is somewhat inconsistent and OpenPPL uses a high number (999) for
 that case.
\end_layout

\begin_layout Section*
Hand And Board Expressions
\end_layout

\begin_layout Standard
OpenHoldem's formula engine uses floating-point-numbers internally and there
 is no easy way to represent a board of cards as a single floating-point-number.
 There could even be various different board-expressions at the right side
 of an equality comparator that are all true.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

WHEN Board = AT ...
\end_layout

\begin_layout Plain Layout

WHEN Board = ATSuited...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Therefore we don't support native Shanky-syntax here but use parameterized
 symbols
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

WHEN board$AT ...
\end_layout

\begin_layout Plain Layout

WHEN board$ATSuited ...
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Cases Matter (Partially)
\end_layout

\begin_layout Standard
OpenHoldem is case-sensitive -- contrary to standard PPL.
 Therefore the case used (upper and/or lower) matters.
 The rules for your OpenPPL code are more user-friendly and less rigid.
 Three areas where case matters:
\end_layout

\begin_layout Itemize
Keywords like 
\begin_inset Quotes eld
\end_inset

WHEN
\begin_inset Quotes erd
\end_inset

, FORCE and operators like OR etc.
 For keywords, three different formats are allowed: all upper-case, all
 lower-case, or a reasonable mix.
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

WHEN (Hand$AA) RaiseMax FORCE
\end_layout

\begin_layout Plain Layout

When (Hand$AA) RaiseMax Force
\end_layout

\begin_layout Plain Layout

when (Hand$AA) RaiseMax force
\end_layout

\end_inset

For better readability we recommend to use only upper-case for keywords.
\end_layout

\begin_layout Itemize
OpenHoldem symbols.
 Native OpenHoldem symbols are case-sensitive and always lower-case.
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

WHEN (pt_vpip0 < 0.10) Fold FORCE
\end_layout

\begin_layout Plain Layout

WHEN (balance0 < 50) RaiseMax FORCE
\end_layout

\end_inset

However: you will probably use these symbols very rarely in your code.
 Probably only to create poker-logical symbols like PT_OpenRaiser_VPIP and
 BigBlindStackSize.
\end_layout

\begin_layout Itemize
OpenPPL-symbols that are part of the library.
 They are case-sensitive OH-script-functions with mixed upper and lower
 case letters.
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

WHEN (StillToAct < 2) RAISETO 3 FORCE
\end_layout

\end_inset

The naming is pretty intuitive, but the function that generates error-messages
 is smart enough to look for similar named symbols and will show you a helpful
 warning if something is wrong.
\end_layout

\begin_layout Section*
False Friends
\end_layout

\begin_layout Standard
Again: case-sensitivity matters.
 There are some (only three) symbols with the 
\begin_inset Quotes eld
\end_inset

same
\begin_inset Quotes erd
\end_inset

 name that have a different meaning for OH-script and OpenPPL.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="30page%">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Symbol
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Meaning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bet
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The minimum bet for the current bet-round, measured in dollars
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bet
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The action min-bet (equivalent to min-raise)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
call
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The amount you need to call, measured in dollars
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Call
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The action 
\begin_inset Quotes eld
\end_inset

Call
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
random
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Generates numbers in the range [0..1)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Random
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Generates integer numbers in the range [0..99]
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
You probably won't need the OH-script symbols, but at least the library
 of OpenPPL-functions uses them internally, so they have to be there.
 For the first two cases OpenHoldem's parser can detect if you took an identifie
r instead of an action and will warn you about that.
 But at the moment you need to take care about the latter case.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/OH_Random.JPG

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section*
Keyword 
\begin_inset Quotes eld
\end_inset

Set
\begin_inset Quotes erd
\end_inset

 For User-Defined Variables
\end_layout

\begin_layout Standard
Long story short: Shanky-PPL is an easy, English-like language that is intuitive
 to use, but it contains some technical flaws.
 For example, it can't be parsed with a one-token-look-ahead like all other
 modern programming languages.
 This complicates the parser and especially the generation of good, helpful
 error-messages.
 Therefore we had to deviate at some points a liitle bit.
 The most conspicuous point is the new keyword 
\begin_inset Quotes eld
\end_inset

Set
\begin_inset Quotes erd
\end_inset

 before a user-variable:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

WHEN ...
 Set user_utg_limp_raised_preflop
\end_layout

\end_inset


\end_layout

\begin_layout Section*
No Shanky-Style Delay
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

preflop
\end_layout

\begin_layout Plain Layout

    WHEN ...
 RaiseBy 3 Delay 5 FORCE
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A user-defined delay after an action simply does not fit the concept of
 functions, that traditionally return only a single value.
 Besides that: we believe that it is very clumsy to have thousands of lines
 with a fixed delay.
 OpenHoldem natively supports a solution that is way better suited for this
 use-case: a f$delay-functions.
\end_layout

\begin_layout Standard
It requires only some (or some dozen) lines of code for perfect randomized
 delays, depending e.g.
 on board-texture, betting-actions, etc.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

##f$delay##
\end_layout

\begin_layout Plain Layout

   WHEN UncoordinatedFlop AND Random < 10 RETURN 2500 FORCE
\end_layout

\begin_layout Plain Layout

   WHEN ...
\end_layout

\end_inset


\end_layout

\begin_layout Section*
f$sitout Function
\end_layout

\begin_layout Standard
For similar reasons OpenPPL does no longer support a SitOut-command.
 We prefer to separate the playing logic from hopper-logic.
 Therefore OpenHoldem has a f$sitout-function.
 Furthermore OpenHoldem supports f$sitin, f$autopost, f$leave, f$close and
 some more.
 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

##f$InUTG##
\end_layout

\begin_layout Plain Layout

    WHEN (dealposition = 3) RETURN True FORCE
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

##f$sitout##
\end_layout

\begin_layout Plain Layout

   // issittingin, handsplayed and floppct are OpenHoldem symbols 
\end_layout

\begin_layout Plain Layout

   // that can be used like any other OpenPPL symbol.
\end_layout

\begin_layout Plain Layout

   // We wait until the orbit is finished and sitout
\end_layout

\begin_layout Plain Layout

   // before we have to post the big blind again.
\end_layout

\begin_layout Plain Layout

   WHEN (issittingin
\end_layout

\begin_layout Plain Layout

        AND handsplayed > 15 
\end_layout

\begin_layout Plain Layout

        AND floppct < 0.20 
\end_layout

\begin_layout Plain Layout

        AND HaveNoCards 
\end_layout

\begin_layout Plain Layout

        AND InUTG) 
\end_layout

\begin_layout Plain Layout

     RETURN True Force  
\end_layout

\end_inset


\end_layout

\begin_layout Section*
RaiseBy And RaiseTo Actions
\end_layout

\begin_layout Standard
Let's assume the following situation: you sit in the big blind and had to
 pay $10.
 Everybody folds to the button who raises to $30.
 Now it is your turn again and you decide to enter 
\begin_inset Quotes eld
\end_inset

90
\begin_inset Quotes erd
\end_inset

 into the raise-box.
 What does this mean?
\end_layout

\begin_layout Standard
Well, it depends on the casino.
\end_layout

\begin_layout Itemize
at some casinos $90 will be your final betsize (RaiseTo, betsizeinterpretationme
thod = 3)
\end_layout

\begin_layout Itemize
other casinos will add $90 to the $10 you already posted, so the final betsize
 will be $100 (betsizeinterpretationmethod = 2).
\end_layout

\begin_layout Itemize
and finally some other casinos will add these $90 to the $30 of the last
 raiser, so the final betsize will be $120 (RaiseBy, betsizeinterpretationmethod
  = 1)
\end_layout

\begin_layout Standard
How does Shanky handle this Babylonian confusion?
\end_layout

\begin_layout Quote
In one case the small blind is counted as part of the pot and in the other
 it is not.
 This can vary between poker rooms as well.
 You just have to experiment to get it where you like and save each profile
 the way you want it.
\end_layout

\begin_layout Quote
(
\noun on
Egor
\noun default
 at 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://bonusbots.com/support/index.php/topic,7934.msg79372.html#msg79372
\end_layout

\end_inset

)
\end_layout

\begin_layout Standard
However we don't like undefined behaviour and we don't want to keep multiple
 versions of our bots for different casinos either.
 Therefore we introduced 2 new commands: RaiseTo and RaiseBy.
 This way you can clearly specify what behaviour you want.
 You only have to specify the correct betsizeinterpretationmethod in your
 tablemap to tell OpenHoldem how your casino behaves and OpenHoldem will
 care about all the rest.automatically.
\end_layout

\begin_layout Standard

\emph on
That's how it should be.
\end_layout

\end_body
\end_document
