#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass amsbook
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth -2
\tocdepth -2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter*
OpenPPL In Practice
\end_layout

\begin_layout Standard
If you have read this manual up to this point you have some basic understanding
 of OpenPPL: syntactical rules, symbols, etc.
 But the main thing --- turning your poker-knowledge into bot-logic ---
 may look like a different kind of beast, if you have no programming experience
 at all.
 So let us take some small examples and see how OpenPPL is used in practice.
\end_layout

\begin_layout Section*
Folding Trash
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

##list_of_biggest_trash##
\end_layout

\begin_layout Plain Layout

    // Trashy hands.
 
\end_layout

\begin_layout Plain Layout

    // Never to be played, except we are in the blinds
\end_layout

\begin_layout Plain Layout

    K8s K7s K6s K5s K4s K3s K2s Q7s...
\end_layout

\begin_layout Plain Layout

    K8o ...
 32o
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

##f$preflop##
\end_layout

\begin_layout Plain Layout

    // Make life easy and get rid of the greatest trash
\end_layout

\begin_layout Plain Layout

    WHEN NOT In BigBlind AND list_of_biggest_trash Fold FORCE
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Open-Raising On The Button
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

WHEN StillToAct = 2 AND Calls = 0 AND Raises = 0
\end_layout

\begin_layout Plain Layout

    WHEN hand$AA OR Hand$KK OR ...
 RaiseTo 3 FORCE
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Threebetting A Steal-Raiser
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// LastRaiserPosition <= 3 means: CO, BU or SB
\end_layout

\begin_layout Plain Layout

WHEN Calls = 0 AND Raises = 1 AND LastRaiserPosition <= 3
\end_layout

\begin_layout Plain Layout

    WHEN AmountToCall <= 3 AND list...
 RaiseTo 9 FORCE
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Contibetting
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

##f$flop##
\end_layout

\begin_layout Plain Layout

    WHEN Bets = 0 AND BotIsLastRaiser
\end_layout

\begin_layout Plain Layout

        WHEN Opponents = 1 AND Random < 80 BetHalfPot FORCE
\end_layout

\begin_layout Plain Layout

        WHEN Opponents = 2 AND Position = Last RaiseBy 66% FORCE
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Effective StackSize
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

##f$EffectiveStacksize##
\end_layout

\begin_layout Plain Layout

    // First orbit preflop only, as it uses MaxStillToActStackSize
\end_layout

\begin_layout Plain Layout

    WHEN StackSize > MaxStillToActStackSize RETURN MaxStillToActStackSize
 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN Others RETURN StackSize FORCE
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Push/Folding In A SNG
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// Going into push-fold-mode when stacksizes are small
\end_layout

\begin_layout Plain Layout

// But be careful!
\end_layout

\begin_layout Plain Layout

// We don't want to push loosely if something is wrong with the stacksize,
\end_layout

\begin_layout Plain Layout

// e.g.
 because the table was occluded, so we check, if it is non-zero.
\end_layout

\begin_layout Plain Layout

WHEN EffectiveStacksize > 0 AND EffectiveStacksize <= 13
\end_layout

\begin_layout Plain Layout

    WHEN Calls = 0 AND Raises = 0 AND (Hand$...
 RaiseMax FORCE
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Detecting A Limp-Raise
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// First action preflop
\end_layout

\begin_layout Plain Layout

WHEN BotsActionsOnThisRound = 0 AND Calls >= 1 AND Raises = 0  
\end_layout

\begin_layout Plain Layout

    // FirstCallerPosition is limited to first orbit preflop only,
\end_layout

\begin_layout Plain Layout

    // so we remember it, making use of advanced memory symbols
\end_layout

\begin_layout Plain Layout

    WHEN Others me_st_MemFirstCallerPosition_FirstCallerPosition
\end_layout

\begin_layout Plain Layout

    // Then continue with normal bot-logic
\end_layout

\begin_layout Plain Layout

    ....
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// After that we can detect a limp-raise like that
\end_layout

\begin_layout Plain Layout

// (assuming, there are no other raisers in the pot)
\end_layout

\begin_layout Plain Layout

WHEN LastRaiserPosition = me_re_MemFirstCallerPosition ...
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Counting Outs 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

##f$MySimpleOutsCounter##
\end_layout

\begin_layout Plain Layout

    WHEN (HaveNutFlushDraw AND HaveNutStraightDraw)
\end_layout

\begin_layout Plain Layout

        // We already have 9 + 8 - 2 duplicates
\end_layout

\begin_layout Plain Layout

        // Plus up to 6 undiscounted outs for Overcards
\end_layout

\begin_layout Plain Layout

        // but some may be already counted for the flush
\end_layout

\begin_layout Plain Layout

        // (if we want to make it extra good, we should check the colours
\end_layout

\begin_layout Plain Layout

        // of our hole cards with OpenHoldems symbols $$ps0 and $$ps1)
\end_layout

\begin_layout Plain Layout

        // The others should be discounted a bit
\end_layout

\begin_layout Plain Layout

        WHEN (Overcards = 2) RETURN 18 FORCE
\end_layout

\begin_layout Plain Layout

        WHEN (Overcards = 1) RETURN 16.5 FORCE
\end_layout

\begin_layout Plain Layout

        WHEN (Overcards = 0) RETURN 15 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN (HaveNutFlushDraw) // AND NOT HaveNutStraightDraw
\end_layout

\begin_layout Plain Layout

        WHEN (HaveInsideStraightDraw AND Overcards = 2)...
 
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Calling According To Odds And Outs
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

##f$CardsLeft##
\end_layout

\begin_layout Plain Layout

    WHEN betround = 2 RETURN 47 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN betround = 3 RETURN 46 FORCE
\end_layout

\begin_layout Plain Layout

    // Drawing at other betrounds doesn't make much sense
\end_layout

\begin_layout Plain Layout

    WHEN Others RETURN -1 FORCE
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

WHEN AmountToCall / (AmountToCall + PotSize) > f$Outs / f$CardsLeft Call
 FORCE
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Playing Fit-Or-Fold Multiway
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

##f$HaveStrongDraw##
\end_layout

\begin_layout Plain Layout

    WHEN HaveStraightDraw OR HaveFlushDraw RETURN true FORCE
\end_layout

\begin_layout Plain Layout

    WHEN HaveInsideStraightDraw AND Overcards = 2 RETURN true FORCE
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

##f$HaveTopPairOrBetter##
\end_layout

\begin_layout Plain Layout

    WHEN HaveTopPair RETURN true FORCE
\end_layout

\begin_layout Plain Layout

    WHEN HaveOverPair RETURN true FORCE
\end_layout

\begin_layout Plain Layout

    WHEN HaveBestOverpairOrBetter RETURN true FORCE
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

##f$flop##
\end_layout

\begin_layout Plain Layout

WHEN Opponents >= 3 AND NOT (f$HaveTopPairOrBetter OR f$HaveStrongDraw)
\end_layout

\begin_layout Plain Layout

    WHEN AmountToCall = 0 Check FORCE
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Closing The Tables
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

##f$leave##
\end_layout

\begin_layout Plain Layout

WHEN issittingout
\end_layout

\begin_layout Plain Layout

     AND elapsedauto > 300   // 5 minutes without action
\end_layout

\begin_layout Plain Layout

     AND nopponentsseated < 4
\end_layout

\begin_layout Plain Layout

  RETURN true FORCE  
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
Now it's up to you.
 Let the fun begin!
\end_layout

\end_body
\end_document
