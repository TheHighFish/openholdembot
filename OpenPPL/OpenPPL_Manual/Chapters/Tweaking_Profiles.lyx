#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass amsbook
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth -2
\tocdepth -2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter*
Tweaking existing Profiles
\end_layout

\begin_layout Standard
Most people in the OpenHoldem world create their profile(s) completely from
 scratch.
 However the users with Shanky-BonusBots experience know a different approach:
 take an existing (demo-)
\begin_inset space ~
\end_inset

bot and tweak it.
 Tweaking OpenPPL-profiles is relative easy, especially if they are written
 the simple way, everything in four large functions (f$preflop, f$flop,
 f$turn and f$river).
 OpenPPL evaluates from top to bottom of a function.
 So if you are not happy with the play in a certain situation the solution
 is easy: create a rule (exception) and put it on top of everything so that
 it overrides the current code.
 Higher position -- higher priority.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/tweaking_profiles.JPG

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section*
Why 
\begin_inset Quotes eld
\end_inset

WHEN Others
\begin_inset Quotes erd
\end_inset

?
\end_layout

\begin_layout Standard
Tweaking this way is easy.
 Now there is just one little technical pitfall.
 The profile to be tweaked might contain some one-line-statements at the
 top that always got executed.
 Now if you add your code on top of that profile the former one-line-statements
 would be bound to the last potential open-ended when-condition in your
 code.
 They would now only get executed if that open-ended when-condition was
 true.
 Therefore you have to terminate your last open-ended when-condition and
 start a new one that is always true:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

WHEN  Others   // Always true
\end_layout

\begin_layout Plain Layout

   // former one-line-statements here
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now the former one-line-statements are guaranteed to get executed always
 again, independent of any conditions in your code.
\end_layout

\begin_layout Section*
Combining multiple Profiles
\end_layout

\begin_layout Standard
Of course it is possible to combine multiple profiles:
\end_layout

\begin_layout Itemize
a complete profile that plays somewhat reasonable on bottom to cover all
 situations.
\end_layout

\begin_layout Itemize
a tweaking, incomplete profile on top of it to fix the largest holes.
\end_layout

\begin_layout Itemize
finally your own tweaking code on the very top of everything for the fine-tuning.
\end_layout

\begin_layout Section*
The final Action
\end_layout

\begin_layout Standard
Complete profiles usually end with the code
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

WHEN Others
\end_layout

\begin_layout Plain Layout

   WHEN Others Fold FORCE
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This code first terminates the last open-ended when-condition and then folds
 everything.
 If your favourite demo-bot misses such a statement this is a clear sign
 that this profile is incomplete, i.e it is a tweak for some other profile.
 In this case it usually needs some code for completion; however if you
 are happy with it you can use this profile as is.
 Whenever OpenHoldem reaches the end of a function it will evaluate the
 end as zero / false / fold and take the action accordingly.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

f$flop = 0.000 [Line 27/73]
\end_layout

\begin_layout Plain Layout

   ...
\end_layout

\begin_layout Plain Layout

   empty_expression__false__zero__when_others_fold_force = 0.000
\end_layout

\end_inset


\end_layout

\end_body
\end_document
