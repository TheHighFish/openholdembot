#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass amsbook
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth -2
\tocdepth -2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Avoid 
\begin_inset Index idx
status open

\begin_layout Plain Layout
race-condition
\end_layout

\end_inset

race-conditions
\end_layout

\begin_layout Standard
Race-conditions happen if two or more processes interrupt each other and
 try to access the same resource at the same time.
 For example it might be, that OpenHoldem tries to enter a betsize at its
 poker table, but then your hopper grabs the mouse and interrupts the bot
 in the middle of an action.
 All kind of unexpected results can happen.
\end_layout

\begin_layout Standard
The good news: there is a solution to this problem.
 OpenHoldem will take care of race-conditions automatically; it will synchronize
 the autoplayer-actions of all instances, including actions taken by the
 rebuy-function and by the chat-function.
 It uses a system-wide 
\begin_inset Index idx
status open

\begin_layout Plain Layout
mutex
\end_layout

\end_inset

mutex to ensure exclusive access to the keyboard and the mouse.
 Unfortunatelly OpenHoldem is not the only program, which uses these resources;
 usually the hopper competes for them, too.
\end_layout

\begin_layout Standard
So any good hopper should wait with its actions, until OpenHoldem has finished
 its input; it has to implement the same protection-mechanism and wait for
 the same mutex.
 The default name of that mutex is 
\begin_inset Quotes eld
\end_inset

OHAntiColl
\begin_inset Quotes erd
\end_inset

, but it can be changed in the preferences to your liking.
\end_layout

\begin_layout Standard
An example AutoIT-hopper-code has been provided by USBFreak  (
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.maxinmontreal.com/wiki/index.php5?title=System_Wide_Mutex_Handling_-_Sam
ple_Code
\end_layout

\end_inset

):
\end_layout

\begin_layout Subsection*
System Wide Mutex Handling - Sample Code
\end_layout

\begin_layout Quotation
Below are 3 functions you'll need if you plan to avoid OH and hopper "collisions
" over mouse and keyboard inputs.
 As you may know, OH ensures it can act on the table in a consistent manner
 by seizing control of mouse / keyboard input (system wide mutex), performing
 its actions (clicking buttons, entering the betsize in text field etc.)
 and then releasing mutex so other applications can perform their tasks.
\end_layout

\begin_layout Quotation
This works fine as long as you run one or few OH instances, and do not have
 a very active hopper to manage them.
 Once you are past that point and start running many tables with as many
 OH instances, plus moving tables around, browsing lobby etc., a situation
 where OH may interfere with hopper operations in the middle of an important
 task occurs, resulting in very unpredictable behaviour.
\end_layout

\begin_layout Quotation
To avoid such a possibility, you may want to implement mutex handling in
 your hopper using below code.
\end_layout

\begin_layout Subsection*
The idea:
\end_layout

\begin_layout Enumerate
Create mutex lock at the start of your hopper.
 This seizes control of keyboard / mouse and no other application can send
 any input using them until mutex is released/unlocked.
 
\end_layout

\begin_layout Enumerate
Find a good time in your hopper loop when game state is stable (no lobby
 browsing, table opening / closing etc.) and release mutex for a period of
 time (in my case this is (number of OH instances opened * 1) + 2 seconds).
 This allows OH instances to grab mutex control for themselves, perform
 any pending actions, and release mutex control again.
 
\end_layout

\begin_layout Enumerate
Once the predetermined period of time expires, create mutex lock again,
 and proceed with hopper operations knowing nothing can interfere with mouse
 / keyboard.
 
\end_layout

\begin_layout Enumerate
At the end of your hopper, release/unlock mutex.
 
\end_layout

\begin_layout Subsection*
Main hopper loop
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

;START YOUR HOPPER, CREATE MUTEX LOCK 
\end_layout

\begin_layout Plain Layout

MutexLock() 
\end_layout

\begin_layout Plain Layout

$Global_Mutex_Handle = _CreateMutex("OHAntiColl") 
\end_layout

\begin_layout Plain Layout

;ENTERING HOPPER LOOP 
\end_layout

\begin_layout Plain Layout

While (1) 
\end_layout

\begin_layout Plain Layout

    ;...
 HOPPER OPERATIONS 
\end_layout

\begin_layout Plain Layout

    ;...
 GAME STATE STABLE, UNLOCK MUTEX 
\end_layout

\begin_layout Plain Layout

    MutexUnlock($Global_Mutex_Handle) 
\end_layout

\begin_layout Plain Layout

    ;...
 WAIT FOR OH TO PERFORM ACTIONS 
\end_layout

\begin_layout Plain Layout

    ;...
 TIME EXPIRED, CREATE MUTEX LOCK AGAIN 
\end_layout

\begin_layout Plain Layout

    MutexLock() 
\end_layout

\begin_layout Plain Layout

wend 
\end_layout

\begin_layout Plain Layout

;END OF HOPPER, RELEASE MUTEX 
\end_layout

\begin_layout Plain Layout

MutexUnlock($Global_Mutex_Handle) 
\end_layout

\begin_layout Plain Layout

;END OF HOPPER, CLOSE MUTEX HANDLE 
\end_layout

\begin_layout Plain Layout

Close_Mutex_Handle($Global_Mutex_Handle)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Hopper functions
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Func _CreateMutex($sOccurenceName) 
\end_layout

\begin_layout Plain Layout

    Local $ERROR_ALREADY_EXISTS = 183 
\end_layout

\begin_layout Plain Layout

    $Global_Mutex_Handle = DllCall("kernel32.dll", 
\end_layout

\begin_layout Plain Layout

        "int", "CreateMutex", "int", 0, 
\end_layout

\begin_layout Plain Layout

        "long", 1, "str", $sOccurenceName) 
\end_layout

\begin_layout Plain Layout

    $lastError = DllCall("kernel32.dll", "int", "GetLastError") 
\end_layout

\begin_layout Plain Layout

    If $lastError[0] = $ERROR_ALREADY_EXISTS Then 
\end_layout

\begin_layout Plain Layout

        Return SetError($lastError[0], $lastError[0], 
\end_layout

\begin_layout Plain Layout

            $Global_Mutex_Handle[0]) 
\end_layout

\begin_layout Plain Layout

    EndIf 
\end_layout

\begin_layout Plain Layout

    Return SetError(0, 0, $Global_Mutex_Handle[0]) 
\end_layout

\begin_layout Plain Layout

EndFunc ;==>_GetMutex
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Func MutexUnlock($Global_Mutex_Handle)        
\end_layout

\begin_layout Plain Layout

    Local $releasemutex = DllCall("kernel32.dll", "int", 
\end_layout

\begin_layout Plain Layout

        "ReleaseMutex", "long", $Global_Mutex_Handle)        
\end_layout

\begin_layout Plain Layout

    Return (IsArray($releasemutex) And $releasemutex[0] > 0)  
\end_layout

\begin_layout Plain Layout

EndFunc   ;==>_ReleaseMutex
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Func Close_Mutex_Handle($hMutex)        
\end_layout

\begin_layout Plain Layout

    Local $aCH = DllCall("Kernel32.dll", "int", 
\end_layout

\begin_layout Plain Layout

        "CloseHandle", "hwnd", $Global_Mutex_Handle)        
\end_layout

\begin_layout Plain Layout

    Return (IsArray($aCH) And $aCH[0] > 0)    
\end_layout

\begin_layout Plain Layout

EndFunc
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Func _API_WaitForSingleObject($Global_Mutex_Handle, $dwMilliseconds)
\end_layout

\begin_layout Plain Layout

    Local $aResult = DllCall("kernel32.dll", "long", 
\end_layout

\begin_layout Plain Layout

        "WaitForSingleObject", "long", $Global_Mutex_Handle, 
\end_layout

\begin_layout Plain Layout

        "long", $dwMilliseconds)        
\end_layout

\begin_layout Plain Layout

    Return $aResult[0]    
\end_layout

\begin_layout Plain Layout

EndFunc   ;==>_API_WaitForSingleObject
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Func MutexLock()        
\end_layout

\begin_layout Plain Layout

    While 1                
\end_layout

\begin_layout Plain Layout

        $Global_Mutex_Handle = _CreateMutex("OHAntiColl");             
   
\end_layout

\begin_layout Plain Layout

        If @error = 0 Then                        
\end_layout

\begin_layout Plain Layout

            ;SUCCESSFULLY CREATED AND LOCKED MUTEX                     
   
\end_layout

\begin_layout Plain Layout

            ExitLoop                
\end_layout

\begin_layout Plain Layout

        Else                        
\end_layout

\begin_layout Plain Layout

            ;WE WILL EXAMINE MUTEX TO SEE IF IT IS RELEASED   
\end_layout

\begin_layout Plain Layout

            Local $result = _API_WaitForSingleObject(
\end_layout

\begin_layout Plain Layout

                $Global_Mutex_Handle, 30000); 
\end_layout

\begin_layout Plain Layout

            ;WAIT FOR MUTEX FOR 30 SECONDS                        
\end_layout

\begin_layout Plain Layout

            If $result = 0 Or $result = 128 Then
\end_layout

\begin_layout Plain Layout

                ;SUCCESSFULLY LOCKED MUTEX                             
   
\end_layout

\begin_layout Plain Layout

                ExitLoop                      
\end_layout

\begin_layout Plain Layout

            EndIf                
\end_layout

\begin_layout Plain Layout

        EndIf                
\end_layout

\begin_layout Plain Layout

        ;WAIT A BIT BEFORE TRYING AGAIN
\end_layout

\begin_layout Plain Layout

        ;WE ARE NOT PROCEEDING UNTIL WE HAVE CONTROL OF MUTEX          
      
\end_layout

\begin_layout Plain Layout

        Sleep(100)        
\end_layout

\begin_layout Plain Layout

    WEnd    
\end_layout

\begin_layout Plain Layout

EndFunc ;==>MutexLock
\end_layout

\end_inset


\end_layout

\end_body
\end_document
