#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass amsbook
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth -2
\tocdepth -2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
How the Interface-Buttons work
\end_layout

\begin_layout Standard
The holdem scraper has the concept of interface regions, that can be clicked
 by the autoplayer to interact with the casino.
 Such an interface region consists of three components:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images_interface_buttons/iX_action_buttons.JPG

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="20text%">
<column alignment="left" valignment="top" width="65text%">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
iXbutton
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Location of the button, where X is the buttons number (0..9) and the location
 is a rectangle, specified by the coordinates of the top-left and bottom-right
 corner.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
iXstate
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Visibility of the button.
 If the button is visible it can be clicked by the autoplayer.
 If not then the action will be skipped or a backup-action will be chosen.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
iXlabel
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type of the button, e.g.fold / call / rais
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
In the tablemap file it looks like that:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

r$i0button           491 320 502 331   000000    0 N 
\end_layout

\begin_layout Plain Layout

r$i0state            491 331 491 331   ffffff    0 C 
\end_layout

\begin_layout Plain Layout

r$i0label            493 322 499 330   ffffff    0 H0 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The purpose of the button region is simply to tell the autoplayer where
 it needs to click the mouse.
 You can set the transform to "none", as only the position of the clickable
 region is of interest for the autoplayer.
 In the example above the position for button 0 is ((491, 320), (502, 331)).
\end_layout

\begin_layout Standard
The purpose of the state region is to determine whether or not the button
 is visible or not.
 It's generally a small color region which has to return true when the button
 is visible.
 But you can use hash as well.
 If you use hash, a true value will be identified as follows (so rename
 your images accordingly):
\end_layout

\begin_layout Itemize
on 
\end_layout

\begin_layout Itemize
yes 
\end_layout

\begin_layout Itemize
checked 
\end_layout

\begin_layout Itemize
true 
\end_layout

\begin_layout Itemize
lit
\end_layout

\begin_layout Standard
OpenHoldem will search for any of these substrings, so 
\begin_inset Quotes eld
\end_inset

checked7
\begin_inset Quotes erd
\end_inset

 would work too, but any other string will be seen as false.
 Finally each interface should also have a label region or regions that
 will further define the purpose of the button.
 So the engine recognizes the following key words within labels:
\end_layout

\begin_layout Itemize
fold 
\end_layout

\begin_layout Itemize
check 
\end_layout

\begin_layout Itemize
call 
\end_layout

\begin_layout Itemize
bet 
\end_layout

\begin_layout Itemize
raise 
\end_layout

\begin_layout Itemize
betsize (and 
\begin_inset Quotes eld
\end_inset

swag
\begin_inset Quotes erd
\end_inset

 for backward compatibility)
\end_layout

\begin_layout Itemize
allin (or all-in)
\end_layout

\begin_layout Itemize
prefold 
\end_layout

\begin_layout Itemize
autopost (or auto-post / autoblind / auto-blind / postblind / post-blind)
\end_layout

\begin_layout Itemize
sitin (or sit-in )
\end_layout

\begin_layout Itemize
sitout (or sit-out )
\end_layout

\begin_layout Itemize
leave (or exit)
\end_layout

\begin_layout Standard
...and various forms of nearly fitting scrapes (e.g.
 
\begin_inset Quotes eld
\end_inset

aut0post
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

a111n
\begin_inset Quotes erd
\end_inset

 and other kind of leetspeak-lookalike).
 Any iXlabel region that produces one of these keywords will be seen by
 the engine as clickable for that specific action.
 Also all the strings starting with these keywords will work: examples:
 "callllll", "check01", "Raiseto:$10" etc.
\end_layout

\begin_layout Section
Sitin/Sitout particular behaviour 
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images_interface_buttons/sitout_fulltilt.JPG

\end_inset


\end_layout

\begin_layout Standard
Traditionally since the early days of FullTilt some special interface-buttons
 are check-boxes: sitin / sitout / prefold / autopost blinds.
 These buttons work slightly differently than the normal action buttons.
 Here a button-state of 
\begin_inset Quotes eld
\end_inset

yes
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

true
\begin_inset Quotes erd
\end_inset

 means the button is checked, whereas 
\begin_inset Quotes eld
\end_inset

no
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

false
\begin_inset Quotes erd
\end_inset

 means it is unchecked and can be clicked.
 This is a Winholdem legacy, and derives from the first sites supported,
 which used check-boxes as most sites still do today.
 Therefore the bevaiour is inversted (compared to normal action-buttons)
 and these buttons will be seen as clickable if their state is 
\begin_inset Quotes eld
\end_inset

off
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Section
The spam buttons 
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images_interface_buttons/i86_spam_button.JPG

\end_inset


\end_layout

\begin_layout Standard
OpenHoldem provides some special buttons for spam handling i86 and if you
 need more i860...i869..
 For spam we intend all the popups that can occlude your table.
 Some sites advertise tournaments about to start, other ask for confirmation
 when you leave the table, etc.
 OH can manage these popups and close them as long as they appear inside
 the poker table in a consistent position.
 There's no label region to scrape here, as type of the button is 
\begin_inset Quotes eld
\end_inset

spam
\begin_inset Quotes erd
\end_inset

 by default; just state and button matter.
 The autoplayer will click them automatically as soon as they become visible.
\end_layout

\begin_layout Enumerate
Shoot a frame of the table with the popup showing, and create i86state as
 a color or hash region which returns true like you would for any other
 button.
 
\end_layout

\begin_layout Enumerate
Paint a button region where you want OH to click to kill the popup.
 Done.
 
\end_layout

\begin_layout Standard
Notice that this is evaluated every heartbeat, so OH is very fast at closing
 these popups.
 If popups show in inconsistent locations or out of poker table, you need
 an external script, or external software like PTFB to manage them.
\end_layout

\begin_layout Section
The betsize interface 
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images_interface_buttons/i3edit.JPG

\end_inset


\end_layout

\begin_layout Standard
If we play NoLimit or PotLimit games we need a way to enter betsizes.
 This is called 
\begin_inset Quotes eld
\end_inset

betsizing
\begin_inset Quotes erd
\end_inset

 (formerly 
\begin_inset Quotes eld
\end_inset

swagging
\begin_inset Quotes erd
\end_inset

, WinHoldems abbreviation for 
\series bold

\begin_inset Quotes eld
\end_inset

s
\series default
tated 
\series bold
wag
\series default
er
\begin_inset Quotes erd
\end_inset

).
 To make betsizing work you need to configure several things:
\end_layout

\begin_layout Itemize
first you need an input-box, which is 
\emph on
i3edit
\emph default
, that specifies the region where the autoplayer should enter the betsize
\end_layout

\begin_layout Itemize
before we can enter the text into i3edit we should delete the old one or
 the default one.
 To do this properly we have to define how to select and how to delete this
 text.
 
\end_layout

\begin_deeper
\begin_layout Itemize
betsize
\emph on
selectionmethod
\emph default
, the supported methods for selection are: 
\emph on
Click Drag
\emph default
 / 
\emph on
Dbl Click
\emph default
 / 
\emph on
Nothing
\emph default
 / 
\emph on
Sgl Click
\emph default
 / 
\emph on
Triple Click
\end_layout

\begin_layout Itemize
betsize
\emph on
deletionmethod
\emph default
, the supported methods for deletion are: 
\emph on
Delete
\emph default
 / 
\emph on
Backspace
\emph default
 / 
\emph on
Nothing
\end_layout

\end_deeper
\begin_layout Itemize
once the i3edit-field got cleared the autoplayer can enter the new bet and
 confirm it.
 To confirm the bet two methods are supported (betsize
\emph on
confirmationmethod
\emph default
):
\end_layout

\begin_deeper
\begin_layout Itemize

\emph on
Enter
\end_layout

\begin_layout Itemize

\emph on
Click Bet
\emph default
, which clicks the i3-button, which usually is the same as 
\begin_inset Quotes eld
\end_inset

raise
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_deeper
\begin_layout Standard
This is basically how NL-betsizing works.
 Every casino is a little bit different.
 You have to play around a bit and identify which sequence works, then you
 can specify the usual i3edit, i3state, i3button, i3label and the methods
 for selection / deletion / confirmation.
 And that's it -- nearly.
\end_layout

\begin_layout Section*
Interpreting the betsize
\end_layout

\begin_layout Standard
Let’s assume the following situation: you sit in the big blind and had to
 pay $10.
 Everybody folds to the button who raises to $30.
 Now it is your turn again and you decide to enter “90” into the raise-box.
 What does this mean? Well, it depends on the casino.
 
\end_layout

\begin_layout Itemize
at some casinos $90 will be your final betsize (betsizeinterpretationmethod
 = 3).
 The entered amount will be identical to OpenHoldems f$betsize function
 or to the RaiseTo-amount of OpenPPL.
\end_layout

\begin_layout Itemize
other casinos will add $90 to the $10 you already posted, so the final betsize
 will be $100.(betsizeinterpretationmethod = 2) 
\end_layout

\begin_layout Itemize
and finally some other casinos will add these $90 to the $30 of the last
 raiser, so the final betsize will be $120 (betsizeinterpretationmethod
 = 1, RaiseBy in OpenPPL) 
\end_layout

\begin_layout Standard
Again you have to play a bit with your casino and have to find out how it
 works, so that you can tell the autoplayer how it is expected to execute
 your desired action.
 But that's it finally -- we promise!
\end_layout

\end_body
\end_document
