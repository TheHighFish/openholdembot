#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass amsbook
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth -2
\tocdepth -2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section*
Log-Files
\end_layout

\begin_layout Standard
Sometimes the bot will take an unexpected decision, more rarely for bots
 in production, but for sure regularly for bots in development.
 The reason can be mis-scrapes (Table Map or improper system settings);
 it can be bad bot-logic; it can even be a bug in OpenHoldem.
\end_layout

\begin_layout Standard
Many newbies will automatically assume the latter case.
 Whenever you encounter a strange behaviour it is a good decision to make
 use of OpenHoldems logging capabilities.
 OpenHoldem will generate a log file as it operates, less detailed logs
 for production, more detailed logs for debugging.
 The verbosity of the log can be set in the Preferences tabs 
\emph on
Logging
\emph default
 and 
\emph on
Debugging
\emph default
.
 The log file can be found at 
\emph on
OpenHoldem
\backslash
logs
\backslash
oh_NN.log
\emph default
 where NN is the session-ID.
\end_layout

\begin_layout Subsection*
Basic Info
\end_layout

\begin_layout Standard
On every autoplayer action OpenHolldem will create a section with some basic
 info about the table-state, the decision taken and the action executed.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

2015-09-10 08:17:35 - Version: 7.8.0 
\end_layout

\begin_layout Plain Layout

2015-09-10 08:17:35 - Chairs: 9 
\end_layout

\begin_layout Plain Layout

2015-09-10 08:17:35 - Userchair: 4 
\end_layout

\begin_layout Plain Layout

2015-09-10 08:17:35 - Holecards: 7d9c 
\end_layout

\begin_layout Plain Layout

2015-09-10 08:17:35 - Community: ..........
 
\end_layout

\begin_layout Plain Layout

2015-09-10 08:17:35 - Handrank: 2 
\end_layout

\begin_layout Plain Layout

2015-09-10 08:17:35 - Hand: hcard 
\end_layout

\begin_layout Plain Layout

2015-09-10 08:17:35 - My balance: 2135.00
\end_layout

\begin_layout Plain Layout

2015-09-10 08:17:35 - My currentbet: 80.00 
\end_layout

\begin_layout Plain Layout

2015-09-10 08:17:35 - To call: 0.00 
\end_layout

\begin_layout Plain Layout

2015-09-10 08:17:35 - Pot: 280.00
\end_layout

\begin_layout Plain Layout

2015-09-10 08:18:19 - Big blind: 80.00 
\end_layout

\begin_layout Plain Layout

2015-09-10 08:18:19 - Big bet (FL): 160.00 
\end_layout

\begin_layout Plain Layout

2015-09-10 08:18:19 - f$betsize: 0.00 
\end_layout

\begin_layout Plain Layout

2015-09-10 08:18:19 - Formulas: FCK..
 
\end_layout

\begin_layout Plain Layout

2015-09-10 08:18:19 - Buttons: F.KRA 
\end_layout

\begin_layout Plain Layout

2015-09-10 08:18:19 - Best action: f$call 
\end_layout

\begin_layout Plain Layout

2015-09-10 08:18:19 - Action taken: f$check
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As you can see in this example the bot-logic decided to call, but there
 was no bet to call and no call button either.
 So OpenHoldem finally checked (backup-action).
\end_layout

\begin_layout Subsection*
Autoplayer Trace
\end_layout

\begin_layout Standard
If you want to go into detail the most useful part of the log is clearly
 the autoplayer-trace.
 It helps ypu to investigate√∂ the entire evaluation that caused a decision.
 Let's assume we have a f$alli-function that looks like that: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

##f$alli##
\end_layout

\begin_layout Plain Layout

   f$HaveUnbeatableMonster
\end_layout

\begin_layout Plain Layout

OR f$HaveSuperDuperDraw
\end_layout

\begin_layout Plain Layout

OR f$PoorHeroIsPotCommitted
\end_layout

\end_inset


\end_layout

\begin_layout Standard
On evaluation of f$alli OpenHoldem will look up the three user-defined functions
 (f$HaveUnbeatableMonster, ...), evaluate them and combine their return-values
 to a final result.
 This leads to a simplified call-tree:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/log_simple_call_tree.JPG

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Each function that is one level indented got called by the next function
 above that is one level less indented.
 Things would be easy (or a night-mare) if all code was in one oversized
 function and all called symbols were black boxes.
 However one of the advantages of OH-script and OpenPPL is that you can
 structure your code and create functions on your own.
 Indeed OpenPPL provides several hundred poker-logical functions that work
 out of the box.
 They are all available as plain text, so that you can have a look at their
 code and OpenHoldem can log their evaluation in detail.
 Let's assume your user-defined function f$HaveUnbeatableMonster is an easy
 one and just considers the winning percentage (the built-in symbol prwin),
 f$HaveSuperDuperDraw uses the OpenPPL-symbols HaveStraightDraw and HaveFlushDra
w, whereas f$PoorHeroIsPotCommitted uses Balance and Pot.
 Then the autoplayer-trace could look like that:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/log_detailed_call_tree.JPG

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
So the implementation and the evaluation of each symbol use some other symbols
 that are one level deeper indented in the autoplayer-trace.
 In practice the autoplayer-trace will get even moire detailed.
 For example even a simple symbol like Balance might need the user-chair,
 the size of the big-blind and some more.
 But the principle is always the same and with a little bit experience the
 logs become easy to read.
\end_layout

\begin_layout Subsection*
OpenPPL
\end_layout

\begin_layout Standard
OpenPPL works very similar to OH-script.
 Basic info and the autoplayer-trace are the same.
\end_layout

\begin_layout Subsubsection*
Initializations
\end_layout

\begin_layout Standard
Most OpenPPL-symbols get calculated on the fly when you need them.
 But some symbols require special initialization, exactly once per orbit
 when it is our turn and the scraper saw enough stable frames.
 This is the case mainly for counters like 
\begin_inset Quotes eld
\end_inset

Raises
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Calls
\begin_inset Quotes erd
\end_inset

 and some more.
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

InitMemorySymbols = 0.000 [Line 18/3976]
\end_layout

\begin_layout Plain Layout

  TimeToInitMemorySymbols = 1.000 [Line 8/3921]
\end_layout

\begin_layout Plain Layout

    isfinalanswer = 1.000
\end_layout

\begin_layout Plain Layout

    GameStateChanged = 1.000 [Line 2/3928]
\end_layout

\begin_layout Plain Layout

      dealerchair = 4.000
\end_layout

\begin_layout Plain Layout

      me_re_MemOldGameStateDealerChair = 3.000
\end_layout

\begin_layout Plain Layout

  False = 0.000 [Line 1/230]
\end_layout

\begin_layout Plain Layout

  InitMissingSmallBlind = 0.000 [Line 2/772]
\end_layout

\begin_layout Plain Layout

    betround = 1.000
\end_layout

\begin_layout Plain Layout

    ConstBetRoundPreflop = 1.000 [Line 1/199]
\end_layout

\begin_layout Plain Layout

...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You will see these initializations on top of the autoplayer-trace, i.e.
 below the summary, but above f$preflop.
\end_layout

\begin_layout Subsubsection*
Main evaluations
\end_layout

\begin_layout Standard
After everything got initialized OpenHoldem will evaluate the main OpenPPL-funct
ion for the current betround: f$preflop, f$flop, f$turn or f$river.
 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

f$preflop = 11.000 [Line 93/2726]
\end_layout

\begin_layout Plain Layout

  StackSize = 26.688 [Line 1/1422]
\end_layout

\begin_layout Plain Layout

  StackSize = 26.688 [cached]
\end_layout

\begin_layout Plain Layout

  BigBlindSize = 80.000 [Line 1/1373]
\end_layout

\begin_layout Plain Layout

    bet1 = 80.000
\end_layout

\begin_layout Plain Layout

  BigBlindSize = 80.000 [cached]
\end_layout

\begin_layout Plain Layout

  listGp1 = 1.000
\end_layout

\begin_layout Plain Layout

  listGp2 = 0.000
\end_layout

\begin_layout Plain Layout

  listGp3 = 0.000
\end_layout

\begin_layout Plain Layout

  user_EarlyZone = 1.000
\end_layout

\begin_layout Plain Layout

  Raises = 1.000 [cached]
\end_layout

\begin_layout Plain Layout

  Calls = 0.000 [Line 1/630]
\end_layout

\begin_layout Plain Layout

    me_re_MemCalls = 0.000
\end_layout

\begin_layout Plain Layout

  Calls = 0.000 [cached]
\end_layout

\begin_layout Plain Layout

  BotsLastAction = -1000007.000 [Line 2/573]
\end_layout

\begin_layout Plain Layout

    None = -1000007.000 [cached]
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Return Values
\end_layout

\begin_layout Standard
You might wonder, what the numbers mean:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

f$preflop = 11.000
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

BotsLastAction = -1000007.000 [Line 2/573]
\end_layout

\begin_layout Plain Layout

    None = -1000007.000
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The evaluator-engine needs to handle three different type of final actions:
\end_layout

\begin_layout Itemize
betsizes (in big-blinds), encoded as positive numbers, so f$preflop = 11.000
 in the example above means RaiseTo 11 (big blinds).
\end_layout

\begin_layout Itemize
percentaged potsized bets, encoded as small negative numbers.
 -0.666 means bet 2/3
\begin_inset space ~
\end_inset

pot.
\end_layout

\begin_layout Itemize
fixed actions, encoded as large negative numbers.
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

##Beep## 
\end_layout

\begin_layout Plain Layout

-1000000
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

##Fold##
\end_layout

\begin_layout Plain Layout

-1000001
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

##Undefined_BetSize_Probably_Due_To_Misscraped_Pot_Defaulting_To_Minraise##
\end_layout

\begin_layout Plain Layout

-1000002
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

##RaiseMin##
\end_layout

\begin_layout Plain Layout

Raise
\end_layout

\end_inset

Altogether 25 named action-constants -- too much to mention them here.
 But they are in the OpenPPL-library which is a plain-text-file.
 Feel welcome to have a look -- there are many interesting things to discover.
\end_layout

\begin_layout Subsubsection
Undefined Actions and Return Values
\end_layout

\begin_layout Standard
Whenever OpenHoldem reaches the end of a function it will evaluate a special
 symbol 
\begin_inset Quotes eld
\end_inset

empty_expression__false__zero__when_others_fold_force
\begin_inset Quotes erd
\end_inset

.
 So it will no longer continue silently with an 
\begin_inset Quotes eld
\end_inset

undefined
\begin_inset Quotes erd
\end_inset

 value like in the past.
 Instead it will create a verbose log-file.
 This symbol always evaluates to zero, which is also the encoding of 
\begin_inset Quotes eld
\end_inset

False
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

Fold
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

f$flop = 0.000 [Line 27/73]
\end_layout

\begin_layout Plain Layout

   ...
\end_layout

\begin_layout Plain Layout

   empty_expression__false__zero__when_others_fold_force = 0.000
\end_layout

\begin_layout Plain Layout

f$check = 1.000 [cached] 
\end_layout

\begin_layout Plain Layout

f$fold = 1.000 [cached]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
So whenever you see this symbol in your log-files you know that your profile
 does not handle the current situation.
 This regularly happens for so-called 
\begin_inset Quotes eld
\end_inset

tweaks
\begin_inset Quotes erd
\end_inset

, i.e.
 incomplete profiles, meant to be used on top of another one.
 Folding a set of kings? No wonder, nothing to be tweaked, playing sets
 of kings is easy.
 In such cases you have to complete your profile.
 Tweaking, completing and combining profiles is explained in the OpenPPL-manual.
\end_layout

\begin_layout Subsubsection*
Autoplayer Actions
\end_layout

\begin_layout Standard
After the OpenPPL-decision got calculated OpenHoldem translates it to OH-script
 autoplayer-actions (plural because of backup-actions) and thereafter the
 autoplayer works the normal way.
 That's why you can see some OH-script autoplayer-functions at the end of
 the autoplayer-trace, each one with a pre-computed (
\begin_inset Quotes eld
\end_inset


\emph on
[cached]
\emph default

\begin_inset Quotes erd
\end_inset

) value.
 Please be aware that OpenHoldem -- contrary to OpenPPL -- doesn't use big-blind
s for its calculations but dollars.
 So 
\begin_inset Quotes eld
\end_inset

RaiseTo 11
\begin_inset Quotes erd
\end_inset

 in the example above leads to a f$betsize of $880.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

f$betsize = 880.000 [cached] 
\end_layout

\begin_layout Plain Layout

f$rais = 1.000 [cached] 
\end_layout

\begin_layout Plain Layout

f$call = 1.000 [cached] 
\end_layout

\begin_layout Plain Layout

f$check = 1.000 [cached]
\end_layout

\begin_layout Plain Layout

f$allin_on_betsize_balance_ratio = 0.000 [Line 5/1864]
\end_layout

\begin_layout Plain Layout

f$fold = 1.000 [cached]
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Errors and Warnings
\end_layout

\begin_layout Standard
Besides of the autoplayer-trace OpenHoldem logs all errors and warnings,
 i.e.:
\end_layout

\begin_layout Itemize
all shown error-messages
\end_layout

\begin_layout Itemize
all message-boxes that got suppressed by your preferences 
\end_layout

\begin_layout Itemize
some more errors and warnings where an error-dialog would not be appropriate.
\end_layout

\begin_layout Subsection*
Debug Messages
\end_layout

\begin_layout Standard
Debug messages are mainly meant for developers and for experienced users
 who want to get more info about the way how OpenHoldem works internally.
 These messages can be turned on with the Debugging-tab of the Preferences
 dialog.
 They are very useful for finding and fixing bugs, but they are usually
 not needed for most end-users.
 Below an example about blind-detection, blind-locking (for stability) and
 detecting hand-resets.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

2015-08-15 16:00:24 - [CHandresetDetector] Setting handnumber to [] 
\end_layout

\begin_layout Plain Layout

2015-08-15 16:00:24 - [CHandresetDetector] Handreset by dealerchair: false
 
\end_layout

\begin_layout Plain Layout

2015-08-15 16:00:24 - [CHandresetDetector] Handreset by cards: false 
\end_layout

\begin_layout Plain Layout

2015-08-15 16:00:24 - [CHandresetDetector] Handreset by handnumber: true
 
\end_layout

\begin_layout Plain Layout

2015-08-15 16:00:24 - [CHandresetDetector] Handreset by community cards:
 false 
\end_layout

\begin_layout Plain Layout

2015-08-15 16:00:24 - [CHandresetDetector] Handreset by potsize: false 
\end_layout

\begin_layout Plain Layout

2015-08-15 16:00:24 - [CHandresetDetector] Handreset by nopponentsplaying:
 false 
\end_layout

\begin_layout Plain Layout

2015-08-15 16:00:24 - [CHandresetDetector] Handreset by increasing balance:
 false 
\end_layout

\begin_layout Plain Layout

2015-08-15 16:00:24 - [CHandresetDetector] Handreset by changing blind level:
 false 
\end_layout

\begin_layout Plain Layout

2015-08-15 16:00:24 - [CHandresetDetector] Handreset by new small blind:
 true 
\end_layout

\begin_layout Plain Layout

2015-08-15 16:00:24 - [CHandresetDetector] Methods firing this heartbeat:
 0b001000001 
\end_layout

\begin_layout Plain Layout

2015-08-15 16:00:24 - [CHandresetDetector] Methods firing last 3 heartbeat2:
 0b1000001 
\end_layout

\begin_layout Plain Layout

2015-08-15 16:00:24 - [CHandresetDetector] Number of methods firing last
 3 heartbeat2: 2 
\end_layout

\begin_layout Plain Layout

2015-08-15 16:00:24 - [CHandresetDetector] Handreset found 
\end_layout

\begin_layout Plain Layout

2015-08-15 16:00:24 - [CHandresetDetector] Setting last dealerchair to [-1]
 
\end_layout

\begin_layout Plain Layout

2015-08-15 16:00:24 - [CSymbolEngineTableLimits] CalcTableLimits() 
\end_layout

\begin_layout Plain Layout

2015-08-15 16:00:24 - [CSymbolEngineTableLimits] ResetOnHeartbeat() 
\end_layout

\begin_layout Plain Layout

2015-08-15 16:00:24 - [CSymbolEngineTableLimits] TableLimitsNeedToBeComputed()
 true, because not locked 
\end_layout

\begin_layout Plain Layout

2015-08-15 16:00:24 - [CBlindGuesser] Data from scraper (ttlimits, c0limits):
 5.00 / 10.00 / 0.00 
\end_layout

\begin_layout Plain Layout

2015-08-15 16:00:24 - [CBlindLevels] Trying to find best matching blind-level
 for 5.00 / 10.00 / 0.00 
\end_layout

\begin_layout Plain Layout

2015-08-15 16:00:24 - [CBlindLevels] Perfect match found 
\end_layout

\begin_layout Plain Layout

2015-08-15 16:00:24 - [CBlindLevels] Blinds recognized as 5.00 / 10.00 / 20.00
 
\end_layout

\begin_layout Plain Layout

2015-08-15 16:00:24 - [CSymbolEngineTableLimits] AutoLockBlinds() 
\end_layout

\begin_layout Plain Layout

2015-08-15 16:00:24 - [CSymbolEngineTableLimits] blinds_locked_for_current_hand:
 false
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Logging for DLL
\end_layout

\begin_layout Standard
Usually OpenHoldem will stop going into more detail when it reaches a DLL
 symbol, because DLL-functions and C-functions are a black-box for OpenHoldem.
 However it is possible to enable DLL-logging, then OpenHoldem will continue
 like in the axample above if the DLL-function calls back to OH-script.
 Furthermore it is possible to log any user-defined messages from the DLL
 to the standard OpenHoldem-log with a function from the DLL-interface:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

EXE_IMPLEMENTS void   __stdcall WriteLog(char* format, ...);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now if your head hurts be assured: things are half as hard once you have
 gained a little bit experience.
\end_layout

\begin_layout Standard

\emph on
The log-file knows the truth.
 True experts know the log-file.
\end_layout

\end_body
\end_document
