#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass amsbook
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth -2
\tocdepth -2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
The Bot Logic (OH-script)
\end_layout

\begin_layout Subsection*
OH-Script
\end_layout

\begin_layout Standard
Every bot needs some poker-specific logic to decide how to act.
 OpenHoldem provides a basic scripting-language for that, which was inherited
 from WinHoldem.
 The logic is action-centered, i.e.
 everytime it is your turn the following basic questions have to be answered:
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

shall I go allin?
\begin_inset Quotes erd
\end_inset

 --- f$allin (boolean, interpreting 0 as false and everything else as true)
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

shall I click a betpot-button?
\begin_inset Quotes erd
\end_inset

 -- f$betpot_2_1...f$betpot_1_4 for twice betpot to 1/4
\begin_inset space ~
\end_inset

betpot.
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

shall I raise, and how much?
\begin_inset Quotes erd
\end_inset

 --- f$betsize 
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

shall I (min-)raise
\begin_inset Quotes erd
\end_inset

 --- f$raise (mainly for Fixed Limit; boolean)
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

shall I call
\begin_inset Quotes erd
\end_inset

 --- f$call (boolean)
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

shall I check
\begin_inset Quotes erd
\end_inset

 --- f$check (boolean)
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

shall I fold
\begin_inset Quotes erd
\end_inset

 --- f$fold (boolean)
\end_layout

\begin_layout Standard
Per default f$check evaluates to true if it is free to call and f$fold is
 always true, so if all questions were answered with 0 or false, your hand-will
 be check-folded.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/autoplayer_functions_formula_editor.JPG

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
OH-script uses 
\emph on
C(++)
\emph default
-style mathematical expressions, i.e.
 the same mathematical operators like the C-programming-language and OpenHoldems
 built-in symbols.
 An example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

##f$sitout##
\end_layout

\begin_layout Plain Layout

0                                // 0=off 1=on  
\end_layout

\begin_layout Plain Layout

&& issittingin                   // i am sitting in  
\end_layout

\begin_layout Plain Layout

&& (betround==2 || betround==3)  // it is the flop or turn  
\end_layout

\begin_layout Plain Layout

&& nopponentsdealt<=5            // 5 or less opponents 
\end_layout

\end_inset


\end_layout

\begin_layout Section*
The DLL-extension
\end_layout

\begin_layout Standard
Every bot needs such a formula file, even if it is programmed in 
\emph on
C++
\emph default
.
 There are no standalone C++-bots; the user-
\emph on
DLL
\emph default
 is just a programming extensions that make it possible to extend the functional
ity of OpenHoldem by providing additional symbols (constants and parameter-less
 functions).
 The very minimum is a small OH-script or 
\emph on
OpenPPL
\emph default
 formula that redirects every primary function to a DLL-function.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

##notes##
\end_layout

\begin_layout Plain Layout

// Very small OH-formula, that redirects 
\end_layout

\begin_layout Plain Layout

// primary functions to C++-functions in the user.DLL.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

##f$alli##
\end_layout

\begin_layout Plain Layout

dll$alli
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

##f$betsize##
\end_layout

\begin_layout Plain Layout

dll$betsize
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

##f$raise##
\end_layout

\begin_layout Plain Layout

dll$rais
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

##f$call##
\end_layout

\begin_layout Plain Layout

dll$call
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In practice formulas can become arbitary complex, but those are the basic
 principles you will need to understand.
 We will deal with the details of bot-programming in the chapter about OH-script.
\end_layout

\begin_layout Subsection*
Parse-Time and Run-Time Errors 
\end_layout

\begin_layout Standard
The OpenHoldem scripting language will detect various error conditions for
 you and warn you of these conditions.
 Each time a formula is loaded, it is “parsed” for correctness – if there
 are any syntactical errors upon this parse, then a message box will be
 displayed that alerts you to the location of this error.
\end_layout

\begin_layout Standard
Additionally, several classes of run-time errors will be detected, including
 divide-by-zero and infinite recursion.
 Note that the OH-Script language does not support recursion in any form,
 due to the absence of the assignment operator and function parameters to
 control the recursion depth.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/run_time_error.JPG

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Default Bot
\end_layout

\begin_layout Standard
All OH-script-bots are self-contained.
 Once all questions f$alli ..
 f$fold have been answered the best action is well-defined.
 Therefore OH-script does not support a default-bot.
 
\begin_inset Quotes eld
\end_inset

All power (and responsibilities) to the user
\begin_inset Quotes erd
\end_inset

 is the motto of OH-script.
 Things are slightly different for OpenPPL, the other programming language,
 however.
 An OpenPPL-bot might be 
\begin_inset Quotes eld
\end_inset

incomplete
\begin_inset Quotes erd
\end_inset

.
 The end of a code-section might be reached without a matching action being
 found, then the default.bot will take over.
 We will talk about OpenPPL and this default-bot in the next chapters briefly;
 all the details are in an extra handbook, the OpenPPL-manual.
\end_layout

\end_body
\end_document
