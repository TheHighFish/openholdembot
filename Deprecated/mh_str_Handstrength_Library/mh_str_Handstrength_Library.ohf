/////////////////////////////////////////////////////////////////////////////////
//
// mh_str_Handstrength_Library got originally developed by Winngy
//   for a FL-bot in the time of FL-FR-no-fold'em-Hold'em.
//   It got released to the public in 2008:
//   http://www.maxinmontreal.com/forums/viewtopic.php?f=120&t=5799
//   And some symbols got developed by SingleMalt for his DLL
//   http://forum.winholdem.net/wbb//viewtopic.php?f=41&t=11555
//
// Opinions may differ about handstrength,
//   depending on various factors (game-type, table-size, limit, opponents, ...),
//   but this library can be used as a basis to get your bot started.
//   It gets used by lotz of people and by the OpenPPL-project.
//
// Return values:
//   5 = very strong hand (for that hand category)
//   1 = very poor hand (for that hand category)
//   http://www.maxinmontreal.com/wiki/index.php5?title=OpenHoldem:EndUserDocumentation:Symbols:mh_str_explained
//
// mh_str_Handstrength_Library is part of the OpenHoldem project
//   Download page:         http://code.google.com/p/openholdembot/
//   Forums:                http://www.maxinmontreal.com/forums/index.php
//   Licensed under GPL v3: http://www.gnu.org/licenses/gpl.html
//
/////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////
//
// Interface and range-checks,
//   as some values can be out of range due to discounts
//
/////////////////////////////////////////////////////////////////////////////////

##f$mh_straightflush##
(isstraightflush || isroyalflush) ?
(f$strength_straightflush < 1 ? 1 : f$strength_straightflush) :
0

##f$mh_quads##
isfourofakind ?
(f$strength_quads < 1 ? 1 : f$strength_quads) :
0

##f$mh_fullhouse##
isfullhouse ?
(f$strength_fullhouse < 1 ? 1 : f$strength_fullhouse) :
0

##f$mh_flush##
isflush ?
(f$strength_flush < 1 ? 1 : f$strength_flush) :
0

##f$mh_straight##
isstraight ?
(f$strength_straight < 1 ? 1 : f$strength_straight) :
0

##f$mh_trips##
isthreeofakind ?
(f$strength_trips < 1 ? 1 : f$strength_trips ) :
0

##f$mh_twopair##
istwopair ?
(f$strength_twopair < 1 ? 1 : f$strength_twopair) :
0

##f$mh_onepair##
isonepair ?
(f$strength_onepair < 1 ? 1 : f$strength_onepair) :
0

##f$mh_hicard##
// Very low value. Always 0
0

##f$mh_kicker_rank##
(nranked==2 && nrankedcommon==1) ?
  (trank==rankhiplayer?
   `((~rankbits&0x7ffe)>>rankloplayer)+1:
   `((~rankbits&0x7ffe)>>rankhiplayer)+1 ) :
(nranked==3 && nrankedcommon==2) ?
  (trank==rankhiplayer?
   `((~rankbits&0x7ffe)>>rankloplayer)+1:
   `((~rankbits&0x7ffe)>>rankhiplayer)+1 ) : 0


##f$mh_kickerbetter##
// http://forum.winholdem.net/wbb//viewtopic.php?f=41&t=11555
// quads, board quads
(isfourofakind && nrankedcommon==4) ?
	`((~(rankbits)&0x7ffe)>>(rankhiplayer))+1 :
(isthreeofakind && nrankedcommon==3) ?
	`((~(rankbits)&0x7ffe)>>(rankhiplayer))+1 :
(isthreeofakind && nrankedcommon==2) ?
	[(trank==rankhiplayer) ?
		`((~(rankbits)&0x7ffe)>>(rankloplayer))+1 :
		`((~(rankbits)&0x7ffe)>>(rankhiplayer))+1
	] :

// trips, board not paired
// in this case, both hole cards participate in the set, thus kicker is shared
(isthreeofakind && nrankedcommon==1) ?
	0 :
(istwopair && ((pokervalcommon)&(twopair))) ?
	`((~(rankbits)&0x7ffe)>>(rankhiplayer))+1 :
// two pair, board paired
(istwopair && !((pokervalcommon)&(twopair)) && nrankedcommon==2) ?
	[((pcbits)&1) ?
		[(($$pr0)==((pokerval)&0xf)) ?
			`((~(rankbits)&0x7ffe)>>($$pr0))+1 :
		(($$pr1)==((pokerval)&0xf)) ?
			`((~(rankbits)&0x7ffe)>>($$pr1))+1 :
			0
		] :
		0
	] :
// two pair, board not paired
// in this case, both hole cards participate in the two pair, thus kicker is shared
(istwopair && nrankedcommon==1) ?
	0 :
// one pair, board paired
(isonepair && nrankedcommon==2) ?
	`((~(rankbits)&0x7ffe)>>(rankhiplayer))+1 :
// one pair, board not paired
(npcbits==2 && !ispair && isonepair && nrankedcommon==1) ?
	[(trank==rankhiplayer) ?
		`((~(rankbits)&0x7ffe)>>(rankloplayer))+1 :
		`((~(rankbits)&0x7ffe)>>(rankhiplayer))+1
	] :
// hi card
(ishicard) ?
	`((~(rankbits)&0x7ffe)>>(rankhiplayer))+1 :
// this should not happen
0

/////////////////////////////////////////////////////////////////////////////////
//
// Main implementation
//
/////////////////////////////////////////////////////////////////////////////////


##f$strength_straightflush##
// Hand strength evaluator - returns a value from 1-5, 5 representing the strongest hand
isroyalflush && !(pokervalcommon&royalflush)                         ? 5 : // Nuts
isstraightflush && nhandshi==0 && !(pokervalcommon&straightflush)    ? 5 : // Nuts
isstraightflush && !(pokervalcommon&straightflush)                   ? 3 : // I may not have the highest, board does not have a str8flush
isstraightflush && (pokervalcommon&straightflush)                    ? 2 : // I may not have the highest, board does have a str8flush
isroyalflush && (pokervalcommon&royalflush)                          ? 1 : // Chop pot
0


##f$strength_quads##
isfourofakind && nhandshi==0 && !(pokervalcommon&fourofakind)        ? 5 : // Nuts
isfourofakind && nhandshi==0 && (pokervalcommon&fourofakind)         ? 5 : // Nuts
isfourofakind && !(pokervalcommon&fourofakind)                       ? 3 : // I may not have the highest, board does not have quads
isfourofakind && (pokervalcommon&fourofakind)                        ? 1 : // Board has quads, I don't have best kicker
0


##f$strength_fullhouse##
((0
// TwoPair on Board, I have Top Set with the spare card
// e.g. 66/22336
// NOT_YET_IMPLEMENTED
// Board paired, I have pocket pair and top side full house, pocket pair is higher than non-participating board cards
// e.g. QQ/QTT53
|| [ isfullhouse && ispair && nrankedcommon==2 && !(pokervalcommon&twopair)
  && ((pokerval>>8)&15)>(pokerval&15) && (pcbits&0b11100) && trank==((pokervalcommon>>8)&0xf) ]
// Board paired, I have pocket pair and top side full house, pocket pair is lower than non-participating board cards
// e.g. QQ/QTTA3
|| [ isfullhouse && ispair && nrankedcommon==2 && !(pokervalcommon&twopair)
  && ((pokerval>>8)&15)>(pokerval&15) && (pcbits&0b11100) && trank<((pokervalcommon>>8)&0xf) ]
// Board paired, I have pocket pair and bottom side full house, pocket pair is higher than non-participating board cards
// e.g. QQ/QKKT6
|| [ isfullhouse && ispair && nrankedcommon==2 && !(pokervalcommon&twopair)
  && ((pokerval>>8)&15)<(pokerval&15) && (pcbits&0b11100) && trank==((pokervalcommon>>8)&0xf) ]
// Board paired, I have pocket pair and bottom side full house, pocket pair is lower than non-participating board cards
// e.g. QQ/QKKA6
|| [ isfullhouse && ispair && nrankedcommon==2 && !(pokervalcommon&twopair)
  && ((pokerval>>8)&15)<(pokerval&15) && (pcbits&0b11100) && trank<((pokervalcommon>>8)&0xf) ]
) ? 5 :

(0
// Board paired, I don't have pocket pair, I have top side full house, pair is higher than non-participating board cards
// e.g. QJ/QQJ53
|| [ isfullhouse && !ispair && nrankedcommon==2 && !(pokervalcommon&twopair)
  && ((pokerval>>8)&15)>(pokerval&15) && (pokerval&0xf)==((pokervalcommon>>8)&0xf) ]
// Board paired, I don't have pocket pair, I have top side full house, pair is lower than non-participating board cards
// e.g. QJ/QQJA3
|| [ isfullhouse && !ispair && nrankedcommon==2 && !(pokervalcommon&twopair)
  && ((pokerval>>8)&15)>(pokerval&15) && (pokerval&0xf)<((pokervalcommon>>8)&0xf) ]
// Board paired, I don't have pocket pair, I have bottom side full house, pair is higher than non-participating board cards
// e.g. QJ/QJJ53
|| [ isfullhouse && !ispair && nrankedcommon==2 && !(pokervalcommon&twopair)
  && ((pokerval>>8)&15)<(pokerval&15) && (pokerval&0xf)==((pokervalcommon>>8)&0xf) ]
// Board paired, I don't have pocket pair, I have bottom side full house, pair is lower than non-participating board cards
// e.g. QJ/QJJ53
|| [ isfullhouse && !ispair && nrankedcommon==2 && !(pokervalcommon&twopair)
  && ((pokerval>>8)&15)<(pokerval&15) && (pokerval&0xf)<((pokervalcommon>>8)&0xf) ]
// Board has two pair, I have top trips
// e.g. QT/QQJJ8
|| [ isfullhouse && (pokervalcommon&twopair) &&
  ( ((pokervalcommon>>16)&0x0f)==$$pr0 || ((pokervalcommon>>16)&0x0f)==$$pr1 ) ]
) ? 4 :

(0
) ? 3 :

(0
// Board trips, I have pocket pair higher than non-participating board cards
// e.g. QQ/JJJ92
|| [ isfullhouse && ispair && nrankedcommon==3 && (pcbits&0b00011) && $$pr0>((pokervalcommon>>4)&0xf) ]
// Board trips, only one of my hole cards participates, the pair rank is higher than non-participating board cards
// e.g. QT/999T8
|| [ isfullhouse && nrankedcommon==3 && (`(pcbits&0b00011))==1 && (pokerval&0xf)==((pokervalcommon>>4)&0xf) ]
) ? 2 :

(0
// Board trips, I have pocket pair lower than non-participating board cards
// e.g. QQ/JJJK2
|| [ isfullhouse && ispair && nrankedcommon==3 && (pcbits&0b00011) && $$pr0<((pokervalcommon>>4)&0xf) ]
// Board trips, only one of my hole cards participates, the pair rank is lower than non-participating board cards
// e.g. QT/999TK
|| [ isfullhouse && nrankedcommon==3 && (`(pcbits&0b00011))==1 && (pokerval&0xf)<((pokervalcommon>>4)&0xf) ]
// Board has full house
|| [ isfullhouse && (pokervalcommon&fullhouse) ]
) ? 1 : 0 )


##f$strength_flush##
// Big raise
((
0
|| [ ishiflush && (!(pokervalcommon&flush) || pokerval>pokervalcommon) && nrankedcommon==1
     && nstraightflushfillcommon>=3 ]  // nuts
) ? 5 :

// Medium raise
(
0
|| [ isflush && `((~srankbits&0x7fff)>>srankhiplayer)<=1 && nrankedcommon==1 && nsuitedcommon<=4 ] // one card can beat my flush
|| [ ishiflush && (!(pokervalcommon&flush) || pokerval>pokervalcommon) && nrankedcommon<=2
     && nstraightflushfillcommon>=2 ]
) ? 4 :

// Small raise
(
0
|| [ isflush && `((~srankbits&0x7fff)>>srankhiplayer)<=2 && nrankedcommon==1 && nsuitedcommon<=4 ] // two cards can beat my flush
) ? 3 :

// Call
(
0
|| [ isflush && `((~srankbits&0x7fff)>>srankhiplayer)>=3 && nrankedcommon==1 && nsuitedcommon<=4 ] // three or more cards can beat my flush
|| [ isflush && `((~srankbits&0x7fff)>>srankhiplayer)<=2 && nrankedcommon==2 && nsuitedcommon<=4 ] // two or less cards can beat my flush, board paired
) ? 2 :

// Don't call these
(
0
|| [ isflush && `((~srankbits&0x7fff)>>srankhiplayer)>=4 && nsuitedcommon<=4 ] // four or more cards can beat my flush
|| [ isflush && nrankedcommon>=3 ] // board has trips or more
|| [ isflush && pokerval<pokervalcommon && (pokervalcommon&flush) ] // board has flush, my cards don't help
) ? 1 :
0)

// FlushDiscount
- (
0
+ (pokervalcommon&twopair?2:0)
)


##f$strength_straight##
({0
//Board 3 to a straight, cards in rank 1 and rank 2 (high end)
|| [ isstraight && nstraightfillcommon==2 && ((($$pr0==((pokerval>>16)&0xf))&&($$pr1==((pokerval>>12)&0xf))) || (($$pr1==((pokerval>>16)&0xf))&&($$pr0==((pokerval>>12)&0xf))))]
//Board 3 to a straight, cards in rank 1 and rank 3
|| [ isstraight && nstraightfillcommon==2 && ((($$pr0==((pokerval>>16)&0xf))&&($$pr1==((pokerval>>8)&0xf))) || (($$pr1==((pokerval>>16)&0xf))&&($$pr0==((pokerval>>8)&0xf))))]
//Board 3 to a straight, cards in rank 1 and rank 4
|| [ isstraight && nstraightfillcommon==2 && ((($$pr0==((pokerval>>16)&0xf))&&($$pr1==((pokerval>>4)&0xf))) || (($$pr1==((pokerval>>16)&0xf))&&($$pr0==((pokerval>>4)&0xf))))]
//Board 4 to a straight, card used in rank 1, nut straight with an ace
|| [ isstraight && nstraightfillcommon==1 && ((($$pr0==((pokerval>>16)&0xf))&&($$pr0==14)) || (($$pr1==((pokerval>>16)&0xf))&&($$pr1==14))) ]
//Board 4 to a straight, card used in rank 2, nut straight with a king
|| [ isstraight && nstraightfillcommon==1 && ((($$pr0==((pokerval>>12)&0xf))&&($$pr0==13)) || (($$pr1==((pokerval>>12)&0xf))&&($$pr1==13))) ]
//Board 4 to a straight, card used in rank 3, nut straight with a queen
|| [ isstraight && nstraightfillcommon==1 && ((($$pr0==((pokerval>>8)&0xf))&&($$pr0==12)) || (($$pr1==((pokerval>>8)&0xf))&&($$pr1==12))) ]
//Board 4 to a straight, card used in rank 4, nut straight with a jack
|| [ isstraight && nstraightfillcommon==1 && ((($$pr0==((pokerval>>4)&0xf))&&($$pr0==11)) || (($$pr1==((pokerval>>4)&0xf))&&($$pr1==11))) ]
//Board 4 to a straight, card used in rank 5, nut straight with a ten
|| [ isstraight && nstraightfillcommon==1 && ((($$pr0==((pokerval>>0)&0xf))&&($$pr0==10)) || (($$pr1==((pokerval>>0)&0xf))&&($$pr1==10))) ]
//Board 3 to a straight, nut straights
|| [ isstraight && nstraightfillcommon==2 && rankloplayer>=10 ]
} ? 5 :

{0
//Board 3 to a straight, cards in rank 1 and rank 5
|| [ isstraight && nstraightfillcommon==2 && ((($$pr0==((pokerval>>16)&0xf))&&($$pr1==((pokerval>>0)&0xf) || ($$pr1==14 && (((pokerval>>0)&0xf)==1))) || (($$pr1==((pokerval>>16)&0xf))&&($$pr0==((pokerval>>0)&0xf) || ($$pr0==14 && (((pokerval>>0)&0xf)==1))))))]
//Board 3 to a straight, cards in rank 2 and rank 3
//nik0: this sounds like it's nuts, shall we move it to value 5 ?
|| [ isstraight && nstraightfillcommon==2 && ((($$pr0==((pokerval>>12)&0xf))&&($$pr1==((pokerval>>8)&0xf))) || (($$pr1==((pokerval>>12)&0xf))&&($$pr0==((pokerval>>4)&0xf))))]
//Board 3 to a straight, cards in rank 2 and rank 4
//nik0: same here, probably nuts depending on the board
|| [ isstraight && nstraightfillcommon==2 && ((($$pr0==((pokerval>>12)&0xf))&&($$pr1==((pokerval>>4)&0xf))) || (($$pr1==((pokerval>>12)&0xf))&&($$pr0==((pokerval>>4)&0xf))))]
} ? 4 :

{0
//Board 3 to a straight, cards in rank 2 and rank 5
|| [ isstraight && nstraightfillcommon==2 && ((($$pr0==((pokerval>>12)&0xf))&&($$pr1==((pokerval>>0)&0xf) || ($$pr1==14 && (((pokerval>>0)&0xf)==1)))) || (($$pr1==((pokerval>>12)&0xf))&&($$pr0==((pokerval>>0)&0xf) || ($$pr0==14 && (((pokerval>>0)&0xf)==1)))))]
//Board 3 to a straight, cards in rank 3 and rank 4
|| [ isstraight && nstraightfillcommon==2 && ((($$pr0==((pokerval>>8)&0xf))&&($$pr1==((pokerval>>4)&0xf))) || (($$pr1==((pokerval>>8)&0xf))&&($$pr0==((pokerval>>4)&0xf))))]
//Board 3 to a straight, cards in rank 3 and rank 5
|| [ isstraight && nstraightfillcommon==2 && ((($$pr0==((pokerval>>8)&0xf))&&($$pr1==((pokerval>>0)&0xf) || ($$pr1==14 && (((pokerval>>0)&0xf)==1)))) || (($$pr1==((pokerval>>8)&0xf))&&($$pr0==((pokerval>>0)&0xf) || ($$pr0==14 && (((pokerval>>0)&0xf)==1)))))]
//Board 3 to a straight, cards in rank 4 and rank 5 (idiot end)
|| [ isstraight && nstraightfillcommon==2 && ((($$pr0==((pokerval>>4)&0xf))&&($$pr1==((pokerval>>0)&0xf) || ($$pr1==14 && (((pokerval>>0)&0xf)==1)))) || (($$pr1==((pokerval>>4)&0xf))&&($$pr0==((pokerval>>0)&0xf) || ($$pr0==14 && (((pokerval>>0)&0xf)==1)))))]
//Board 4 to a straight, card used in rank 1
|| [ isstraight && nstraightfillcommon==1 && (($$pr0==((pokerval>>16)&0xf)) || ($$pr1==((pokerval>>16)&0xf))) ]
//Board 4 to a straight, card used in rank 2
|| [ isstraight && nstraightfillcommon==1 && (($$pr0==((pokerval>>12)&0xf)) || ($$pr1==((pokerval>>12)&0xf))) ]
} ? 3 :

{0
//Board 4 to a straight, card used in rank 3
|| [ isstraight && nstraightfillcommon==1 && (($$pr0==((pokerval>>8)&0xf)) || ($$pr1==((pokerval>>8)&0xf))) ]
//Board 4 to a straight, card used in rank 4
|| [ isstraight && nstraightfillcommon==1 && (($$pr0==((pokerval>>4)&0xf)) || ($$pr1==((pokerval>>4)&0xf))) ]
} ? 2 :

{0
//Board 4 to a straight, card used in rank 5
|| [ isstraight && nstraightfillcommon==1 && (($$pr0==((pokerval>>0)&0xf) || ($$pr0==14 && (((pokerval>>0)&0xf)==1))) || ($$pr1==((pokerval>>0)&0xf) || ($$pr1==14 && (((pokerval>>0)&0xf)==1)))) ]
//Board has straight
|| [ isstraight && nstraightfillcommon==0 ]
} ? 1 : 0)

// StraightDiscount
- (
0
+(nsuitedcommon>=3)*2
+(nsuitedcommon>=4)
+(nrankedcommon>=2)
+(nrankedcommon>=3)
+(pokervalcommon&twopair?2:0)
// Negate flush discount if we have a good flush draw
- ( nsuitedcommon==3 && nsuited==4 && `((~srankbits&0x7fff)>>srankhiplayer)<=2 )
)


##f$strength_trips##
({0
//Board has No Pair and you have top set
|| [ nrankedcommon==1 && ispair && isthreeofakind && rankhiplayer==rankhicommon]

} ? 5 :

{0
//Board has No Pair and you have middle set
|| [ nrankedcommon==1 && ispair && isthreeofakind && rankhiplayer<rankhicommon && rankhiplayer>ranklocommon ]

//Board has Pair and you have Trips w/ good kicker (used as 4th ranked card)
|| [ nrankedcommon==2 && isthreeofakind && ((trank==$$pr0 && $$pr1==((pokerval>>4)&0xf))||(trank==$$pr1 && $$pr0==((pokerval>>4)&0xf))) ]
} ? 4 :

{0
//Board has Pair and you have Trips w/ moderate kicker (used as 5th ranked card)
|| [ nrankedcommon==2 && isthreeofakind && ((trank==$$pr0 && $$pr1==((pokerval>>0)&0xf))||(trank==$$pr1 && $$pr0==((pokerval>>0)&0xf))) ]

//Board has No Pair and you have bottom set
|| [ nrankedcommon==1 && ispair && isthreeofakind && rankhiplayer==ranklocommon ]
//Board not paired catch all
|| [ isthreeofakind && nrankedcommon==1 ]
} ? 3 :

{0
//Board has Pair and you have Trips w/ poor kicker (not used)
|| [ nrankedcommon==2 && isthreeofakind && ((trank==$$pr0 && $$pr1<((pokerval>>0)&0xf))||(trank==$$pr1 && $$pr0<((pokerval>>0)&0xf))) ]
//Board has 3OAK good kickers
|| [ isthreeofakind && nrankedcommon==3 && rankhiplayer>=13 && rankloplayer>=10 ]
//Board has pair catch all
|| [ isthreeofakind && nrankedcommon==2 ]
} ? 2 :

{0
//Board has 3OAK catch all
|| [ isthreeofakind && nrankedcommon==3 ]
} ? 1 : 0)

// TripsDiscount
- (
0
+(nsuitedcommon>=3)*2
+(nsuitedcommon>=4)
+(!f$mh_no_easy_straight_draw)*2
+(nstraightfillcommon<=1 || nstraightcommon>=4)
)


##f$strength_twopair##
({0
 //Board has No Pair and you have Top two pairs
|| [ nrankedcommon==1 && istwopair && (pokerval&15)<((pokerval>>4)&15) ]
} ? 5 :

{0
//Board has No Pair and you have Top and bottom pair
|| [ nrankedcommon==1 && istwopair && (pokerval&15)<((pokerval>>16)&15) && (pokerval&15)>((pokerval>>4)&15) ]
//Board has No Pair and you have Middle two pairs
|| [ nrankedcommon==1 && istwopair && (pokerval&15)>((pokerval>>8)&15) && (pokerval&15)>((pokerval>>4)&15) && !(rankloplayer==ranklocommon) ]
//Rainbow board
|| [ istwopair && f$mh_safe_board ]
} ? 4 :

{0
//Board has Pair and you have Overpair
|| [ nrankedcommon==2 && istwopair && ($$pr0==((pokerval>>16)&0xf) || $$pr1==((pokerval>>16)&0xf)) ]

|| [ nrankedcommon==2 && istwopair && ispair && $$pr0>trankcommon ]
//Board has No Pair and you have Bottom two pairs
|| [ nrankedcommon==1 && istwopair && (pokerval&15)>((pokerval>>16)&15) ]
} ? 3 :

{0
//Board has Pair and you have Underpair
|| [ nrankedcommon==2 && istwopair && ispair && (pokervalcommon < twopair) && $$pr0<trankcommon ]
//Board has Pair and you have Two pairs w/ good kicker (A-T)
|| [ nrankedcommon==2 && (pokervalcommon < twopair) && istwopair && !ispair && (pokerval&15)>=10 ]
} ? 2 :

{0
//Board has two pair and you have only two pair
|| [ nrankedcommon==2 && istwopair && (pokervalcommon & twopair) ]
//Board has Pair and you have Two pairs w/ poor kicker (9-2)
|| [ nrankedcommon==2 && (pokervalcommon < twopair) && istwopair && !ispair && (pokerval&15)<=9 ]
//Catch all
|| [ istwopair ]
} ? 1 : 0)

// TwoPairDiscount
- (
0
+(nsuitedcommon>=3)*2
+(nsuitedcommon>=4)
+(!f$mh_no_easy_straight_draw)*2
+(nstraightfillcommon<=1 || nstraightcommon>=4)
)


##f$strength_onepair##

((0
//Board has No Pair and you have Overpair 10's or better
|| [ nrankedcommon==1 && ispair && pokerval<twopair && trank>trankcommon && rankloplayer>9]
//Board has No Pair and you have Top pair Ace w/ good kicker (K-T)
|| [ nrankedcommon==1 && ishipair && pokerval<twopair && trank==14 && {(trank==$$pr0 && $$pr1>=10)||(trank==$$pr1 && $$pr0>=10)} ]
//Board has No Pair and you have Top pair King w/ good kicker (A-T)
|| [ nrankedcommon==1 && ishipair && pokerval<twopair && trank==13 && {(trank==$$pr0 && $$pr1>=10)||(trank==$$pr1 && $$pr0>=10)} ]
) ? 5 :

(0
//Board has No Pair and you have Overpair
|| [ nrankedcommon==1 && ispair && pokerval<twopair && trank>trankcommon ]
//Board has No Pair and you have Top pair Queen or lower w/ good kicker (A-T)
|| [ nrankedcommon==1 && ishipair && pokerval<twopair && trank<=12 && {(trank==$$pr0 && $$pr1>=10)||(trank==$$pr1 && $$pr0>=10)} ]
//Board has No Pair and you have Top pair Ace w/ poor kicker (9-2)
|| [ nrankedcommon==1 && ishipair && pokerval<twopair && trank==14 && {(trank==$$pr0 && $$pr1<=9)||(trank==$$pr1 && $$pr0<=9)} ]
) ? 4 :

(0
//Board has No Pair and you have Midpair 1 overcard
|| [ nrankedcommon==1 && ispair && pokerval<twopair && ((pokerval>>8)&15)>trank && ((pokerval>>4)&15)<trank ]
//Board has No Pair and you have Top pair King w/ poor kicker (9-2)
|| [ nrankedcommon==1 && ishipair && pokerval<twopair && trank==13 && {(trank==$$pr0 && $$pr1<=9)||(trank==$$pr1 && $$pr0<=9)} ]
//Board has No Pair and you have Middle pair w/ overcard kicker
|| [ nrankedcommon==1 && ismidpair && pokerval<twopair && !ispair && {(trank==$$pr0 && $$pr1>trankcommon)||(trank==$$pr1 && $$pr0>trankcommon)} ]
) ? 3 :

(0
//Board has No Pair and you have Top pair Queen or lower w/ poor kicker (9-2)
|| [ nrankedcommon==1 && ishipair && pokerval<twopair && trank<=12 && {(trank==$$pr0 && $$pr1<=9)||(trank==$$pr1 && $$pr0<=9)} ]
//Board has No Pair and you have Midpair 2 overcard
|| [ nrankedcommon==1 && ispair && pokerval<twopair && ((pokerval>>8)&15)>trank && ((pokerval>>4)&15)>trank ]
//Board has No Pair and you have Bottom pair w/ overcard kicker
|| [ nrankedcommon==1 && islopair && pokerval<twopair && !ispair && {(trank==$$pr0 && $$pr1>trankcommon)||(trank==$$pr1 && $$pr0>trankcommon)} ]
//Board has Pair and you have "Two overcards w/Ace"
|| [ nrankedcommon==2 && rankloplayer>rankhicommon  && rankhiplayer==14 && rankloplayer>=10 && !ispair ]
//Board has Pair and you have "Two overcards w/ King"
|| [ nrankedcommon==2 && rankloplayer>rankhicommon  && rankhiplayer==13 && rankloplayer>=10 && !ispair ]
) ? 2 :

(0
//Board has No Pair and you have Underpair
|| [ nrankedcommon==1 && ispair && pokerval<twopair && trank<(pokerval&15) ]
//Board has No Pair and you have Middle pair w/ poor kicker
|| [ nrankedcommon==1 && ismidpair && pokerval<twopair && !ispair && {(trank==$$pr0 && $$pr1<trankcommon)||(trank==$$pr1 && $$pr0<trankcommon)} ]
//Board has No Pair and you have Bottom pair w/ poor kicker
|| [ nrankedcommon==1 && islopair && pokerval<twopair && !ispair && {(trank==$$pr0 && $$pr1<trankcommon)||(trank==$$pr1 && $$pr0<trankcommon)} ]
//Board has Pair and you have Two overcards
|| [ nrankedcommon==2 && rankloplayer>rankhicommon ]
//Board has Pair and you have "One overcard w/Ace (A9-A2)"
|| [ nrankedcommon==2 && rankhiplayer==14 && pokerval<twopair && rankloplayer<=9 && rankloplayer<rankhicommon ]
//Board has Pair and you have "One overcard w/ King (K9-K2)"
|| [ nrankedcommon==2 && rankhiplayer==13 && pokerval<twopair && rankloplayer<=9 && rankloplayer<rankhicommon ]
//Board has Pair and you have Two small cards
|| [ nrankedcommon==2 && !ispair && pokerval<twopair && rankhiplayer<=9 ]
) ? 1 : 0)

// OnePairDiscount
- (
0
+(nsuitedcommon>=3)*2
+(nsuitedcommon>=4)
+(!f$mh_no_easy_straight_draw)*2
+(nstraightfillcommon<=1 || nstraightcommon>=4)
+(nopponentsplaying>2)
+didswag
)


##f$mh_nouts##
// http://www.maxinmontreal.com/forums/viewtopic.php?f=112&t=3329
//2P with paired board all cider
//From HTC

betround==2 ? (
(!(ispair) && pokerval&threeofakind && nrankedcommon==2                     ? 4 : 0)+

//Set outs cider
(ispair && pokerval&threeofakind                                            ? 8 : 0)+

//2P OUTS cider
(pokerval&twopair && nrankedcommon==1                                       ? 4 :
 pokerval&twopair && pokervalcommon<twopair && !(ispair) && nouts==4
                                                                            ? 4 : 0)+

//FLUSH OUTS
(nsuited==4 && nsuitedcommon==2 && `((~srankbits&0x7ffe)>>srankhiplayer)<=4 ? 9 :
 nsuited==4 && nsuitedcommon==2 && `((~srankbits&0x7ffe)>>srankhiplayer) >4 ? 8 :
 nsuited==4 && nsuitedcommon==3 && `((~srankbits&0x7ffe)>>srankhiplayer)<=1 ? 9 :
 nsuited==4 && nsuitedcommon==3 && `((~srankbits&0x7ffe)>>srankhiplayer) >1
                                && `((~srankbits&0x7ffe)>>srankhiplayer) <4 ? 4 : 0)+


//STRAIGHT OUTS
(nstraight==4 && nstraightfillcommon>1 &&
 ((rankbits&16398) != 16398 && (rankbits&28674) != 28674)                   ? 8 :
 (rankbits>>ranklo)==0b1011101                                              ? 9 :
 (nstraight==4 && nstraightcommon<=3 && rankloplayer>rankhicommon &&
  rankhiplayer-rankloplayer<=2 &&
  ((rankbits&16398) != 16398 && (rankbits&28674) != 28674)   )              ? 8 :
 nstraightfill==1 && nstraightfillcommon>=2 && !((ranklocommon>8 &&
 f$bothcards==1) && (islopair || ismidpair))                                ? 4 : 0)+

//OVERCARD OUTS
(rankloplayer>rankhicommon && rankloplayer>=11 && nopponentsplaying==1 &&
 (nsuitedcommon<=2 && nsuited==nsuitedcommon ? 0 : 1) &&
 nstraightfillcommon>1 && !ispair                                           ? 4 : 0)+

//cider  overs w/bd flush
(rankloplayer>rankhicommon &&  nopponentsplaying>1 && nsuited==3
 && nsuitedcommon==1 && nstraightfillcommon>2                               ? 3 :

//cider overs w/OESD
 rankloplayer>rankhicommon &&  nopponentsplaying>1 && nsuitedcommon==1
 && nstraight==4 && !(nstraightcommon>3) && !(rankbits&16386 &&
  rankbits&8196) && !(nrankedcommon==1 && pokerval&threeofakind)            ? 3 :  0)+


//cider
(rankloplayer>rankhicommon  && nsuitedcommon==2 && nsuited==4
                                                                            ? 4  : 0)+


((nsuited==3 && nsuitedcommon==2 && rankloplayer>rankhicommon &&
  nstraightfillcommon>=2)                                                   ?1.5:
 (nsuited==3 && nsuitedcommon==2 && rankhiplayer>rankhicommon &&
  rankloplayer<rankhicommon && nstraightfillcommon>=2)                      ?1.5:
 (nsuited==3 && nsuited>nsuitedcommon && nstraightfillcommon>2 &&
  rankloplayer>rankhicommon && rankloplayer>=12)                            ? 2 : 0 )+

  //Pair to 2P out ALL cider or Ispair to set
(nrankedcommon==1 && !(ispair) && pokerval&onepair && rankhiplayer>
 rankhicommon                                                               ? 4 :
 nrankedcommon==1 && !(ispair) && pokerval&onepair && rankloplayer>
 f$rankmidflop && rankhiplayer==rankhicommon                                ? 4 :
 nopponentsplaying==1 && pokerval&onepair && !(ispair) && nrankedcommon==1
 && (islopair || ismidpair)                                                 ? 3 :
 ispair                                                                     ? 2 :
 pokerval&onepair && nrankedcommon==1 && (nsuitedcommon==1 || nsuited==3)
   && !(f$rankmidflop>=9)                                                   ? 2 : 0) +

//BACKDOOR OUTS
(issuited && rankhiplayer==14 && nsuited==3 && nsuitedcommon==1             ?1.5:
 issuited && nsuited==3 && nsuitedcommon==1                                 ? 1 :
 nsuitedcommon==2 && nsuited==3 && `(((~srankbits)&0x7ffe)>>srankhiplayer)<3                       ? 1 :     //cider
                                           0)+
(nstraight==3 && rankloplayer>rankhicommon && nstraightcommon==1            ?1.5: 0)+


//cider Runner top card
(rankhiplayer>rankhicommon && nsuited==3 && nsuitedcommon==1                ? 1.5 : 0 )+

//DISCOUNT OUTS FOR DANGEROUS BOARDS
(nrankedcommon==2                                                           ?-3.5:
 nrankedcommon==3                                                           ?-10 : 0)+


//All cider  flush board
((nsuitedcommon==3 && nsuited==3 && pokerval<twopair) ||
 (nsuitedcommon==2 && nsuited<3 && pokerval<twopair) && !(nstraightfill==1) ? -2 : 0) +

//ALL cider  my high end for OESD will fill hi straight or big chance of tie
( nstraight==4 && !(nstraightcommon>3) && !(rankbits&16386 &&
  rankbits&8196)  && rankloplayer>=8 && !(rankloplayer>rankhicommon)        ? -2 : 0) +

//discount gut for possible FD cider

( nsuitedcommon==2 && nstraightfill==1                                      ? -1 : 0) +

//discount OES that is ass end and lots of overs
(nstraight==4 && nstraightcommon==2 && rankhiplayer<ranklocommon
  && rankloplayer>6                                                       ? -4 : 0 ) +

//discount draw to 2P that might fill a st8 draw  cider
(rankloplayer>8 && nrankedcommon==1 && f$rankmidflop>8 && pokerval&onepair
 && nopponentsplaying>1   && !(nsuited>nsuitedcommon)                              ? -1 :0) +

(rankloplayer>rankhicommon && rankloplayer>=12 &&
 ( (nsuitedcommon==nsuited)||(nstraightcommon==nstraight) )                   ?
            -(nsuitedcommon>1||nstraightcommon>1?nsuitedcommon+nstraightcommon:0): 0)+
{( (nstraight==4&&nstraightfillcommon>2&&((rankbits&16398)!=16398&&(rankbits&28674)!=28674))
 || (nstraightfill==1 && nstraightfillcommon>=2)
 || ((rankbits>>ranklo)==0b1011101) )

 ? -( (nsuitedcommon==2 && !(nstraightfill==1))                             ? 2 :



 nsuitedcommon==3 && nsuited>nsuitedcommon &&
 `((~srankbits&0x7ffe)>>srankhiplayer)<=2                                   ? 2 :
 nsuitedcommon==3                                                           ? 8 : 0):0}
) :


betround==3 ? ( //************TURN BELOW********************

//2P OUTS cider
(pokerval&twopair && nrankedcommon==1                                       ? 4 :
 pokerval&twopair && pokervalcommon<twopair && nrankedcommon>=2
 && !(ispair) && nouts==4                                                   ? 4 : 0)+

//FLUSH OUTS
(nsuited==4 && nsuitedcommon==2 && `((~srankbits&0x7ffe)>>srankhiplayer)<=4 ? 9 :
 nsuited==4 && nsuitedcommon==2 && `((~srankbits&0x7ffe)>>srankhiplayer) >4 ? 8 :
 nsuited==4 && nsuitedcommon==3 && `((~srankbits&0x7ffe)>>srankhiplayer)<=1 ? 9 :
 nsuited==4 && nsuitedcommon==3 && `((~srankbits&0x7ffe)>>srankhiplayer) >1
                                && `((~srankbits&0x7ffe)>>srankhiplayer) <4 ? 3 : 0)+

//STRAIGHT OUTS
(nstraight==4 && nstraightfillcommon>1 &&
 ((rankbits&16398) != 16398 && (rankbits&28674) != 28674)                   ? 8 :
 (rankbits>>ranklo)==0b1011101                                              ? 9 :
 (nstraight==4 && nstraightcommon==3 && rankloplayer>rankhicommon &&
  rankhiplayer-rankloplayer<=2 &&
  ((rankbits&16398) != 16398 && (rankbits&28674) != 28674)   )              ? 8 :
 nstraightfill==1 && nstraightfillcommon>2                                 ? 4 : 0)+

//OVERCARD OUTS

//cider
(rankloplayer>rankhicommon &&  ((nopponentsplaying>1 && nsuited==3
 && nsuitedcommon==1) || (nopponentsplaying<3)) && (nstraightfillcommon>2
 || nopponentsplaying<3) && !nbetsround2>2                                  ? 3 : 0)+

//Overs for OESD cider
(nstraight==4 && nstraightcommon<=3 && rankloplayer>rankhicommon &&
  rankhiplayer-rankloplayer<=2 &&
  ((rankbits&16398) != 16398 && (rankbits&28674) != 28674)                  ? 3 : 0)+

(rankloplayer>rankhicommon && rankloplayer>=12 &&
 (nsuitedcommon>=2 && nsuited==nsuitedcommon ? 0 : 1) &&
 nstraightfillcommon>2         ? 3 : 0)+
((nsuited==4 && nsuitedcommon==2 && rankloplayer>rankhicommon &&
  nstraightfillcommon>=2)                                                   ? 2 :
 (nsuited==4 && nsuitedcommon==2 && rankhiplayer>rankhicommon &&
  rankloplayer<rankhicommon && nstraightfillcommon>=2)                      ? 1 : 0)+



                             //Turn

(!(ispair) && pokerval&threeofakind && nrankedcommon==2                     ? 4 : 0)+

(ispair && pokerval&threeofakind                                            ? 8 : 0)+

           //Pair to 2P out ALL cider or Ispair to trips
(nrankedcommon==1 && !(ispair) && pokerval&onepair && rankhiplayer>
 rankhicommon                                                               ? 4 :
 nrankedcommon==1 && !(ispair) && pokerval&onepair && rankloplayer>
 f$rankmidflop && rankhiplayer==rankhicommon                                ? 4 :
 ispair && rankhiplayer>rankhicommon                                        ? 5 :
 ispair                                                                     ? 2 : 0) +

                    //DISCOUNT OUTS FOR DANGEROUS BOARDS
(pokervalcommon&twopair                                                     ?-12 :
 nrankedcommon==2 && ($$cr0==$$cr3 || $$cr1==$$cr3 || $$cr2==$$cr3)         ?-1  :
 nrankedcommon==2                                                           ?-3  :
 nrankedcommon==3                                                           ?-12 : 0)+

//All cider
((nsuitedcommon==3 && nsuited==3 && pokerval<twopair) ||
 (nsuitedcommon==2 && nsuited<3 && pokerval<twopair) && !(nstraightfill==1) ? -2 : 0) +

//ALL cider my high end for OESD will fill hi straight or big chance of tie
(nstraightfillcommon>1 && nstraight==4 && rankloplayer>=8
 && !(rankloplayer>rankhicommon)                                            ? -2 : 0) +

//discount gut for possible FD cider
( nsuitedcommon==2 && nstraightfill==1 && nsuited<4
  && !(pokerval&twopair && nrankedcommon==1)                                ? -1 : 0) +

//discount draw to 2P that might fill a st8 draw  cider
(rankloplayer>8 && nrankedcommon==1 && f$rankmidflop>8 && pokerval&onepair
 && nopponentsplaying>1   && !(nsuited>nsuitedcommon)                              ? -1 :0) +

(rankloplayer>rankhicommon && rankloplayer>=12 &&
 ( (nsuitedcommon==nsuited)||(nstraightcommon==nstraight) )                   ?
            -(nsuitedcommon>1||nstraightcommon>1?nsuitedcommon+nstraightcommon:0): 0)+
{( (nstraight==4&&nstraightfillcommon>2&&((rankbits&16398)!=16398&&(rankbits&28674)!=28674))
 || (nstraightfill==1 && nstraightfillcommon>=2)
 || ((rankbits>>ranklo)==0b1011101) )
 ? -( (nsuitedcommon==2&&($$cs0==$$cs3 || $$cs1==$$cs3 || $$cs2==$$cs3))    ? 0 :

  (nsuitedcommon==2 &&  !(nstraightfill==1) && nsuited<3)                     ? 2 :

 nsuitedcommon==3 && nsuited>nsuitedcommon &&
 `((~srankbits&0x7ffe)>>srankhiplayer)<=2                                   ? 2 :
 nsuitedcommon==3                                                           ? 8 : 0):0}
) : 0


##f$mh_bottomsd##
// http://www.maxinmontreal.com/forums/viewtopic.php?f=110&t=6578&start=60&hilit=%2Abottomsd%2A
// f$bottomsd
(betround==2 && nstraight==4 && nstraightfillcommon - nstraightfill==1 && (rankhiplayer-rankloplayer)==1 && (rankhiplayer-rankloplayer)==1 && pcbits<4)
|| (betround==2 && nstraight==4 && nstraightfillcommon - nstraightfill==1 && (rankhiplayer-rankloplayer)==1 && (rankhiplayer-rankloplayer)== 2 && pcbits<10)
|| (betround==2 && nstraight==4 && nstraightfillcommon - nstraightfill==1 && (rankhiplayer-rankloplayer)==1 && (rankhiplayer-rankloplayer)== 3 && pcbits<=5)
&&
( (rankbits >> rankloplayer&0x1f)==0xf &&
!(rankhiplayer==$$cr0 ||
rankhiplayer==$$cr1 ||
rankhiplayer==$$cr2 ||
rankhiplayer==$$cr3 ||
rankhiplayer==$$cr4)
)
||
( (rankbits >> rankhiplayer&0x1f)==0xf &&
!(rankloplayer==$$cr0 ||
rankloplayer==$$cr1 ||
rankloplayer==$$cr2 ||
rankloplayer==$$cr3 ||
rankloplayer==$$cr4)
)


##f$mh_nsuitedbetter##
// http://forum.winholdem.net/wbb//viewtopic.php?f=41&t=11555
`((~(srankbits)&0x7ffe)>>(srankhiplayer))


##f$mh_3straight00##
// http://forum.winholdem.net/wbb//viewtopic.php?f=41&t=11555
(nstraightcommon==3)


##f$mh_3straight01##
// http://forum.winholdem.net/wbb//viewtopic.php?f=41&t=11555
   (nstraightcommon==3)
|| (`((rankbitscommon)&0x7c00)>=3) // broadway


##f$mh_3straight10##
// http://forum.winholdem.net/wbb//viewtopic.php?f=41&t=11555
   (nstraightcommon==3)
|| (`((rankbitscommon)&0x003c)>=3) && !((rankbitscommon)&0x4002) // wheel


##f$mh_3straight11##
// http://forum.winholdem.net/wbb//viewtopic.php?f=41&t=11555
   (nstraightcommon==3)
|| (`((rankbitscommon)&0x003c)>=3) && !((rankbitscommon)&0x4002) // wheel
|| (`((rankbitscommon)&0x7c00)>=3)  				  	          // broadway

/////////////////////////////////////////////////////////////////////////////////
//
// Supporting functions
//
/////////////////////////////////////////////////////////////////////////////////

##f$mh_no_easy_straight_draw##
//NO EASY STRAIGHT DRAW
(nstraightcommon<=2 && nstraightfillcommon>=3)
|| (nbetsround1>=2
    && (     (nstraightfillcommon==1 && nstraightcommon==4 && (`(rankbitscommon&0x007f))==4)   // 6543
          || (nstraightfillcommon==1 && nstraightcommon==3 && (`(rankbitscommon&0x007c))==4)   // 6542, 6432
       )
   )


##f$mh_safe_board##
  [nrankedcommon<2
&& nsuitedcommon<3
&& nstraightcommon<3
&& nstraightfillcommon>1 ]
&& !(betround>2 && rankhicommon==14 && rankhicommon>rankhiplayer)


##f$bothcards##
// 2 means both my cards are used in my hand

!(ispair) &&

      (
       ($$pr0==f$rankhiflop) || ($$pr0==f$rankmidflop) ||
       ($$pr0==f$rankloflop) || ($$pr0==$$cr3)         ||
       ($$pr0==$$cr4)                                    )

       &&

      (
       ($$pr1==f$rankhiflop) || ($$pr1==f$rankmidflop) ||
       ($$pr1==f$rankloflop) || ($$pr1==$$cr3)         ||
       ($$pr1==$$cr4)                                    )


       ? 2 :


!(ispair) &&

      (
       ($$pr0==f$rankhiflop) || ($$pr0==f$rankmidflop) ||
       ($$pr0==f$rankloflop) || ($$pr0==$$cr3)         ||
       ($$pr0==$$cr4)                                    )

       ||

      (
       ($$pr1==f$rankhiflop) || ($$pr1==f$rankmidflop) ||
       ($$pr1==f$rankloflop) || ($$pr1==$$cr3)         ||
       ($$pr1==$$cr4)                                    )

       ? 1 :  0


##f$rankmidflop##
$$cr0>$$cr1 && $$cr0<$$cr2 ?
$$cr0 :
$$cr0>$$cr2 && $$cr0<$$cr1 ?
$$cr0 :
$$cr1>$$cr0 && $$cr1<$$cr2 ?
$$cr1 :
$$cr1<$$cr0 && $$cr1>$$cr2 ?
$$cr1 :
$$cr2


##f$rankhiflop##
$$cr0>$$cr1 && $$cr0>$$cr2 ?
$$cr0 :
$$cr1>$$cr2 ?
$$cr1 :
$$cr2


##f$rankloflop##
$$cr0<$$cr1 && $$cr0<$$cr2 ?
$$cr0 :
$$cr1<$$cr0 && $$cr1<$$cr2 ?
$$cr1 :
$$cr2

/////////////////////////////////////////////////////////////////////////////////
//
// End of mh_str_Handstrength_Library.ohf
//
/////////////////////////////////////////////////////////////////////////////////
